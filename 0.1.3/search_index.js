var documenterSearchIndex = {"docs":
[{"location":"demo/beta/#Estimating-Beta","page":"Estimating Beta","title":"Estimating Beta","text":"","category":"section"},{"location":"demo/beta/#Download-the-monthly-stock-file-from-CRSP","page":"Estimating Beta","title":"Download the monthly stock file from CRSP","text":"","category":"section"},{"location":"demo/beta/","page":"Estimating Beta","title":"Estimating Beta","text":"Since we are about to download data from CRSP we set up a connection with our WRDS credentials","category":"page"},{"location":"demo/beta/","page":"Estimating Beta","title":"Estimating Beta","text":"using FinanceRoutines\nusing DataFrames, DataFramesMeta, Dates\nusing FixedEffectModels # for regressions\nwrds_conn = FinanceRoutines.open_wrds_pg()","category":"page"},{"location":"demo/beta/","page":"Estimating Beta","title":"Estimating Beta","text":"# Import the monthly stock file\ndf_msf = import_MSF(wrds_conn; date_range = (Date(\"1980-01-01\"), Dates.today())); \ndf_msf = build_MSF!(df_msf);    # Run common processing\n# keep only what we need from the MSF\nselect!(df_msf, :permno, :date, :datem, :ret, :mktcap)","category":"page"},{"location":"demo/beta/#Download-the-Fama-French-three-pricing-factors-from-Ken-French's-website","page":"Estimating Beta","title":"Download the Fama-French three pricing factors from Ken French's website","text":"","category":"section"},{"location":"demo/beta/","page":"Estimating Beta","title":"Estimating Beta","text":"This downloads directly data from Ken French's website and formats the data","category":"page"},{"location":"demo/beta/","page":"Estimating Beta","title":"Estimating Beta","text":"df_FF3 = import_FF3()\n# make sure the returns are expressed in the same unit as in the MSF\ntransform!(df_FF3, [:mktrf, :smb, :hml, :rf] .=> ByRow((x->x/100)), renamecols=false )","category":"page"},{"location":"demo/beta/#Merge-the-data-and-estimate-beta","page":"Estimating Beta","title":"Merge the data and estimate beta","text":"","category":"section"},{"location":"demo/beta/","page":"Estimating Beta","title":"Estimating Beta","text":"# Merge the data\ndf_msf = leftjoin(df_msf, df_FF3, on = [:datem] )\n# Create excess return\n@rtransform!(df_msf, :ret_rf = :ret - :rf)\n\n# Estimate CAPM beta over the whole sample\nsort!(df_msf, [:permno, :date])\nfor subdf in groupby(df_msf, :permno)\n    if size(dropmissing(subdf, [:ret_rf, :mktrf]))[1] > 2\n        β_CAPM = coef(reg(subdf, @formula(ret_rf ~ mktrf)))[2]\n        subdf[:, :β_CAPM ] .= β_CAPM\n    else\n        subdf[:, :β_CAPM ] .= missing\n    end\nend\nselect(unique(df_msf, [:permno, :β_CAPM]), :permno, :β_CAPM)\n\n# Estimate 3 Factor betas\nfor subdf in groupby(df_msf, :permno)\n    if size(dropmissing(subdf, [:ret_rf, :mktrf, :smb, :hml]))[1] > 2\n        β_MKT, β_SMB, β_HML = coef(reg(subdf, @formula(ret_rf ~ mktrf + smb + hml)))[2:4]\n        subdf[:, :β_MKT ] .= β_MKT\n        subdf[:, :β_SMB ] .= β_SMB\n        subdf[:, :β_HML ] .= β_HML\n    else\n        subdf[:, :β_MKT ] .= missing; \n        subdf[:, :β_SMB ] .= missing; \n        subdf[:, :β_HML ] .= missing\n    end\nend\nunique(df_msf, r\"β\")\nselect(unique(df_msf, r\"β\"), :permno, :β_MKT, :β_SMB, :β_HML)","category":"page"},{"location":"demo/beta/#Rolling-betas","page":"Estimating Beta","title":"Rolling betas","text":"","category":"section"},{"location":"demo/beta/","page":"Estimating Beta","title":"Estimating Beta","text":"...","category":"page"},{"location":"lib/internals/#Package-Internals","page":"Package Internals","title":"Package Internals","text":"","category":"section"},{"location":"lib/internals/#FinanceRoutines-Module","page":"Package Internals","title":"FinanceRoutines Module","text":"","category":"section"},{"location":"lib/internals/","page":"Package Internals","title":"Package Internals","text":"Modules = [FinanceRoutines]\nPublic = false","category":"page"},{"location":"lib/internals/#FinanceRoutines.open_wrds_pg-Tuple{AbstractString, AbstractString}","page":"Package Internals","title":"FinanceRoutines.open_wrds_pg","text":"Open a Postgres connection on WRDS server\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#Public-Interface","page":"Public Interface","title":"Public Interface","text":"","category":"section"},{"location":"lib/public/#FinanceRoutines-Module","page":"Public Interface","title":"FinanceRoutines Module","text":"","category":"section"},{"location":"lib/public/","page":"Public Interface","title":"Public Interface","text":"Modules = [FinanceRoutines]\nPrivate = false","category":"page"},{"location":"lib/public/#FinanceRoutines.build_Funda!-Tuple{DataFrames.DataFrame}","page":"Public Interface","title":"FinanceRoutines.build_Funda!","text":"build_Funda!(df_funda::DataFrame; save)\n\nClean up the compustat funda file download from crsp (see import_Funda)\n\nArguments\n\ndf_funda::DataFrame: A standard dataframe with compustat data (minimum variables are in import_Funda)\n\nKeywords\n\nsave::String: Save a gzip version of the data on path $save/funda.csv.gz; Default does not save the data.\nclean_cols::Bool: Clean up the columns of the dataframe to be of type Float64; Default is false and leaves the Decimal type intact\n\nReturns\n\ndf_funda::DataFrame: DataFrame with compustat funda file \"cleaned\"\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.build_MSF!-Tuple{DataFrames.DataFrame}","page":"Public Interface","title":"FinanceRoutines.build_MSF!","text":"build_MSF!(df_msf::DataFrame; save, trim_cols, clean_cols)\n\nClean up the CRSP Monthly Stock File (see import_MSF)\n\nArguments\n\ndf::DataFrame: A standard dataframe with compustat data (minimum variables are in import_Funda)\n\nKeywords\n\nsave::String: Save a gzip version of the data on path $save/funda.csv.gz; Default does not save the data.\ntrim_cols::Bool: Only keep a subset of relevant columns in the final dataset\nclean_cols::Bool: Clean up the columns of the dataframe to be of type Float64; Default is false and leaves the Decimal type intact\n\nReturns\n\ndf::DataFrame: DataFrame with crsp MSF file \"cleaned\"\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.estimate_price_GSW!-Tuple{DataFrames.DataFrame}","page":"Public Interface","title":"FinanceRoutines.estimate_price_GSW!","text":"estimate_price_GSW!\n\narguments\n\n- `maturity::Real`: in years\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.estimate_return_GSW!-Tuple{DataFrames.DataFrame}","page":"Public Interface","title":"FinanceRoutines.estimate_return_GSW!","text":"estimate_return_GSW!\n\narguments\n\n- `maturity::Real`: in years\n- `frequency::Symbol`: :daily, :monthly, :annual type\n- `type::Symbol`: :log or standard one-period arithmetic return\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.estimate_yield_GSW!-Tuple{DataFrames.DataFrame}","page":"Public Interface","title":"FinanceRoutines.estimate_yield_GSW!","text":"estimate_yield_GSW!\n\narguments\n\n- `maturity::Real`: in years\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.import_FF3-Tuple{Symbol}","page":"Public Interface","title":"FinanceRoutines.import_FF3","text":"import_FF3(frequency::Symbol)\n\nDownload and import the Fama-French 3 Factors from Ken French website. \n\nIf frequency is unspecified, import the monthly research returns. If frequency is :daily, import the daily research returns. \n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.import_Funda-Tuple{LibPQ.Connection}","page":"Public Interface","title":"FinanceRoutines.import_Funda","text":"import_Funda(wrds_conn; date_range, variables)\nimport_Funda(;\n    date_range::Tuple{Date, Date} = (Date(\"1900-01-01\"), Dates.today()),\n    variables::String = \"\", user=\"\", password=\"\")\n\nImport the funda file from CapitalIQ Compustat on WRDS Postgres server\n\nArguments\n\nwrds_conn::Connection: An existing Postgres connection to WRDS; creates one if empty\n\nKeywords\n\ndate_range::Tuple{Date, Date}: A tuple of dates to select data (limits the download size)\nvariables::Vector{String}: A vector of String of additional variable to include in the download\nuser::String: username to log into the WRDS cli; default to ask user for authentication\npassword::String: password to log into the WRDS cli\n\nReturns\n\ndf_funda::DataFrame: DataFrame with compustat funda file\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.import_GSW-Tuple{}","page":"Public Interface","title":"FinanceRoutines.import_GSW","text":"import_GSW(; date_range)\n\nGSW Curves\n\narguments\n\n- `date_range::Tuple{Date, Date}`: range for selection of data\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.import_MSF-Tuple{LibPQ.Connection}","page":"Public Interface","title":"FinanceRoutines.import_MSF","text":"import_MSF(wrds_conn; date_range, variables)\nimport_MSF(;\n    date_range::Tuple{Date, Date} = (Date(\"1900-01-01\"), Dates.today()),\n    variables::String = \"\", user=\"\", password=\"\")\n\nImport the CRSP Monthly Stock File (MSF) from CRSP on WRDS PostGre server\n\nArguments\n\nwrds_conn::Connection: An existing Postgres connection to WRDS; creates one if empty\n\nKeywords\n\ndate_range::Tuple{Date, Date}: A tuple of dates to select data (limits the download size)\nvariables::Vector{String}: A vector of String of additional variable to include in the download\n\nReturns\n\ndf_msf_final::DataFrame: DataFrame with msf crsp file\n\n\n\n\n\n","category":"method"},{"location":"#FinanceRoutines.jl","page":"Home","title":"FinanceRoutines.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Some useful tools to work with academic financial data in Julia","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package provides a collection of routines for academic finance work.  This is useful to get started with a clean copy of asset prices from CRSP and a ad-hoc merge with the accounting data from the Compustat Funda file. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"I have also added utilities to download treasury yield curves (GSW) and Fama-French research factors.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This is still very much work in progress: file issues for comments.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"FinanceRoutines.jl is a not yet a registered package. You can install it from github  via","category":"page"},{"location":"","page":"Home","title":"Home","text":"import Pkg\nPkg.add(\"https://github.com/eloualiche/FinanceRoutines.jl\")","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Using WRDS (CRSP, Compustat, etc)\nSee the WRDS User Guide for an introduction to using the package to download data from WRDS\nDemos to how this integrates into standard estimations\nSee how to estimate asset pricing betas in the Estimating Beta demo.","category":"page"},{"location":"#Other-Resources","page":"Home","title":"Other Resources","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"There are multiple online resources on using the WRDS Postgres database and build the standard finance and accounting datasets:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Ian D. Gow and Tony Ding: \"Empirical Research in Accounting: Tools and Methods\"; available here\nChen, Andrew Y. and Tom Zimmermann: \"Open Source Cross-Sectional Asset Pricing\"; 2022, 27:2; available here\nChristoph Scheuch, Stefan Voigt, Patrick Weiss: \"Tidy Finance with R\"; 2023; Chapman & Hall; available here","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"man/wrds_guide/#WRDS-User-Guide","page":"WRDS User Guide","title":"WRDS User Guide","text":"","category":"section"},{"location":"man/wrds_guide/#Opening-a-WRDS-connection","page":"WRDS User Guide","title":"Opening a WRDS connection","text":"","category":"section"},{"location":"man/wrds_guide/","page":"WRDS User Guide","title":"WRDS User Guide","text":"Since we are about to download data from CRSP we set up a connection with our WRDS credentials","category":"page"},{"location":"man/wrds_guide/","page":"WRDS User Guide","title":"WRDS User Guide","text":"using FinanceRoutines\nusing DataFrames, DataFramesMeta, Dates\nusing FixedEffectModels # for regressions\nwrds_conn = FinanceRoutines.open_wrds_pg()","category":"page"},{"location":"man/wrds_guide/#Download-the-monthly-stock-file-from-CRSP","page":"WRDS User Guide","title":"Download the monthly stock file from CRSP","text":"","category":"section"},{"location":"man/wrds_guide/","page":"WRDS User Guide","title":"WRDS User Guide","text":"# Import the monthly stock file\ndf_msf = import_MSF(wrds_conn; date_range = (Date(\"1980-01-01\"), Dates.today())); \ndf_msf = build_MSF!(df_msf);    # Run common processing\n# keep only what we need from the MSF\nselect!(df_msf, :permno, :date, :datem, :ret, :mktcap)","category":"page"},{"location":"man/wrds_guide/#Download-the-annual-compustat-funda-file-from-WRDS","page":"WRDS User Guide","title":"Download the annual compustat funda file from WRDS","text":"","category":"section"},{"location":"man/wrds_guide/","page":"WRDS User Guide","title":"WRDS User Guide","text":"df_funda = import_Funda(wrds_conn; date_range = (Date(\"1980-01-01\"), Dates.today())); \ndf_funda = build_Funda!(df_funda);","category":"page"},{"location":"man/wrds_guide/#Merge-both-files-CRSP-MSF-and-Compustat-Funda","page":"WRDS User Guide","title":"Merge both files CRSP MSF and Compustat Funda","text":"","category":"section"},{"location":"man/wrds_guide/","page":"WRDS User Guide","title":"WRDS User Guide","text":"df_linktable = FinanceRoutines.import_ccm_link(wrds_conn)\ndf_msf = link_MSF(df_linktable, df_msf) # merge gvkey on monthly stock file\n\n# merge for a crsp/compustat merged file\ndf_ccm = innerjoin(df_msf, df_funda, on = [:gvkey, :date_y], matchmissing=:notequal)","category":"page"}]
}
