var documenterSearchIndex = {"docs":
[{"location":"demo/beta/#Estimating-Stock-Betas","page":"Estimating Stock Betas","title":"Estimating Stock Betas","text":"","category":"section"},{"location":"demo/beta/","page":"Estimating Stock Betas","title":"Estimating Stock Betas","text":"This describes the step by step procedure to estimate betas stock by stock first unconditionally and then using rolling windows. We first download the monthly stock file.","category":"page"},{"location":"demo/beta/","page":"Estimating Stock Betas","title":"Estimating Stock Betas","text":"Since we are about to download data from CRSP we set up a connection with our WRDS credentials","category":"page"},{"location":"demo/beta/","page":"Estimating Stock Betas","title":"Estimating Stock Betas","text":"using FinanceRoutines\nusing DataFrames, DataPipes, Dates\nusing FixedEffectModels # for regressions\n\nconst wrds_conn = FinanceRoutines.open_wrds_pg()\nconst date_init = Date(\"1990-01-01\")","category":"page"},{"location":"demo/beta/","page":"Estimating Stock Betas","title":"Estimating Stock Betas","text":"We are ready to import the monthly stock file:","category":"page"},{"location":"demo/beta/","page":"Estimating Stock Betas","title":"Estimating Stock Betas","text":"df_msf_raw = import_MSF_v2(wrds_conn; date_range = (date_init, Dates.today())); ","category":"page"},{"location":"demo/beta/","page":"Estimating Stock Betas","title":"Estimating Stock Betas","text":"And the Fama-French three pricing factors from Ken French's website. This downloads directly data from Ken French's website and formats the data","category":"page"},{"location":"demo/beta/","page":"Estimating Stock Betas","title":"Estimating Stock Betas","text":"df_FF3 = import_FF3()\n# make sure the returns are expressed in the same unit as in the MSF\ntransform!(df_FF3, [:mktrf, :smb, :hml, :rf] .=> ByRow((x->x/100)), renamecols=false )","category":"page"},{"location":"demo/beta/#Unconditional-Stock-Betas","page":"Estimating Stock Betas","title":"Unconditional Stock Betas","text":"","category":"section"},{"location":"demo/beta/#Format-the-monthly-stock-file-from-CRSP","page":"Estimating Stock Betas","title":"Format the monthly stock file from CRSP","text":"","category":"section"},{"location":"demo/beta/","page":"Estimating Stock Betas","title":"Estimating Stock Betas","text":"# keep only what we need from the MSF\ndf_msf = select(df_msf_raw, :permno, :mthcaldt => :date, :datem, \n    [:mthret, :mthcap] .=> ByRow(passmissing(Float64)) .=> [:ret, :mthcap]) # convert from decimals","category":"page"},{"location":"demo/beta/#Merge-the-data-and-estimate-beta","page":"Estimating Stock Betas","title":"Merge the data and estimate beta","text":"","category":"section"},{"location":"demo/beta/","page":"Estimating Stock Betas","title":"Estimating Stock Betas","text":"# Merge the data\ndf_msf = leftjoin(df_msf, df_FF3, on = [:datem] )\n# Create excess return\ntransform!(df_msf, [:ret, :rf] => ( (r1, r0) -> r1 .- r0 ) => :ret_rf)\n\n# Estimate CAPM beta over the whole sample\nsort!(df_msf, [:permno, :date])\nfor subdf in groupby(df_msf, :permno)\n    if size(dropmissing(subdf, [:ret_rf, :mktrf]))[1] > 2\n        β_CAPM = coef(reg(subdf, @formula(ret_rf ~ mktrf)))[2]\n        subdf[:, :β_CAPM ] .= β_CAPM\n    else\n        subdf[:, :β_CAPM ] .= missing\n    end\nend\nselect(unique(df_msf, [:permno, :β_CAPM]), :permno, :β_CAPM)\n\n# Estimate 3 Factor betas\nfor subdf in groupby(df_msf, :permno)\n    if size(dropmissing(subdf, [:ret_rf, :mktrf, :smb, :hml]))[1] > 2\n        β_MKT, β_SMB, β_HML = coef(reg(subdf, @formula(ret_rf ~ mktrf + smb + hml)))[2:4]\n        subdf[:, :β_MKT ] .= β_MKT\n        subdf[:, :β_SMB ] .= β_SMB\n        subdf[:, :β_HML ] .= β_HML\n    else\n        subdf[:, :β_MKT ] .= missing; \n        subdf[:, :β_SMB ] .= missing; \n        subdf[:, :β_HML ] .= missing\n    end\nend\nunique(df_msf, r\"β\")\nselect(unique(df_msf, r\"β\"), :permno, :β_MKT, :β_SMB, :β_HML)","category":"page"},{"location":"demo/beta/#Rolling-Betas-for-Stocks","page":"Estimating Stock Betas","title":"Rolling Betas for Stocks","text":"","category":"section"},{"location":"demo/beta/","page":"Estimating Stock Betas","title":"Estimating Stock Betas","text":"I export a very simple function for rolling betas (see the test for examples). ","category":"page"},{"location":"demo/beta/","page":"Estimating Stock Betas","title":"Estimating Stock Betas","text":"First we prepare the basic dataset from the monthly stock file and the Fama-French risk factors for example","category":"page"},{"location":"demo/beta/","page":"Estimating Stock Betas","title":"Estimating Stock Betas","text":"# Get individual stock returns\ndf_msf = select(df_msf_raw, :permno, :mthcaldt => :date, :datem, \n    [:mthret, :mthcap] .=> ByRow(passmissing(Float64)) .=> [:ret, :mthcap]) # convert from decimals\n# merge and create excess returns\ndf_msf = leftjoin(df_msf, df_FF3, on = [:datem] )\ntransform!(df_msf, [:ret, :rf] => ( (r1, r0) -> r1 .- r0 ) => :ret_rf)\nsort!(df_msf, [:permno, :date])","category":"page"},{"location":"demo/beta/","page":"Estimating Stock Betas","title":"Estimating Stock Betas","text":"Now we are ready to run the regression using the function calculate_rolling_betas that the package exports","category":"page"},{"location":"demo/beta/","page":"Estimating Stock Betas","title":"Estimating Stock Betas","text":"insertcols!(df_msf, :a=>missing, :bMKT=>missing, :bSMB=>missing, :bHML=>missing)\n@time for subdf in groupby(df_msf, :permno)\n    β = calculate_rolling_betas(\n        [ones(nrow(subdf)) subdf.mktrf subdf.smb subdf.hml],\n        subdf.ret_rf; \n        window=60,         # 60 months\n        min_data=nothing,   # what is the minimum number of nonmissing data to return a proper number\n        method=:linalg\n    )\n    subdf[!, [:a, :bMKT, :bSMB, :bHML]] = β\nend\n\nimport Statistics: median, mean\n@p df_msf |> groupby(__, :datem) |> \n    combine(__, :bMKT .=> \n        [(x-> emptymissing(mean)(skipmissing(x))) (x-> emptymissing(median)(skipmissing(x)))] .=>\n        [:bMKT_mean :bMKT_median])","category":"page"},{"location":"demo/beta/","page":"Estimating Stock Betas","title":"Estimating Stock Betas","text":"Go make some coffee ... this takes a little while (~ 15mn on M2max macbook pro).  I don't think my method is super efficient ","category":"page"},{"location":"lib/internals/#Package-Internals","page":"Package Internals","title":"Package Internals","text":"","category":"section"},{"location":"lib/internals/#FinanceRoutines-Module","page":"Package Internals","title":"FinanceRoutines Module","text":"","category":"section"},{"location":"lib/internals/","page":"Package Internals","title":"Package Internals","text":"Modules = [FinanceRoutines]\nPublic = false","category":"page"},{"location":"lib/internals/#FinanceRoutines.open_wrds_pg-Tuple{AbstractString, AbstractString}","page":"Package Internals","title":"FinanceRoutines.open_wrds_pg","text":"Open a Postgres connection on WRDS server\n\n\n\n\n\n","category":"method"},{"location":"demo/crsp_siz_to_ciz/#Transitioning-to-the-new-CRSP-file-format","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"","category":"section"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"CRSP is changing the way they disseminate price data. This is mostly relevant for the daily and monthly stock price data.","category":"page"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"General information and code examples are available on WRDS Website. I try to provide a short guide about how I went about converting some of the most basic crsp filters to the new format. Note that the legacy files are named SIZ (CRSP 1.0) and the new file format is CIZ (CRSP 2.0). ","category":"page"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"WRDS has excellent guides, and what follows is mainly for my reference and how we would do this simply in julia. crsp-ciz-faq","category":"page"},{"location":"demo/crsp_siz_to_ciz/#Getting-mapping-tables-from-old-to-new-formats","page":"Transitioning to the new CRSP file format","title":"Getting mapping tables from old to new formats","text":"","category":"section"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"First, I am going to reference the main mapping and metadata tables that allow to quickly convert old code into modern one. These tables are available from the WRDS postgres server","category":"page"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"using FinanceRoutines\nusing DataPipes, DataFrames, DataFramesMeta, DataPipes\nwrds_conn = FinanceRoutines.open_wrds_pg(); # open a wrds connection with credentials\nsee(df) = show(df, allcols=true, allrows=true, truncate=0)","category":"page"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"const get_postgres_table = FinanceRoutines.get_postgres_table\n# main table for converting columns\nsiz_to_ciz = get_postgres_table(\"crsp\", \"metasiztociz\"; wrds_conn=wrds_conn) |> DataFrame \n# flag information\nflag_info = get_postgres_table(\"crsp\", \"metaFlagInfo\"; wrds_conn=wrds_conn) |> DataFrame \nflag_coverage = get_postgres_table(\"crsp\", \"metaFlagCoverage\"; wrds_conn=wrds_conn) |> DataFrame \nitem_info = get_postgres_table(\"crsp\", \"metaItemInfo\"; wrds_conn=wrds_conn) |> DataFrame \n\nstock_names = get_postgres_table(\"crsp\", \"stocknames\"; wrds_conn=wrds_conn) |> DataFrame \nstock_info_hist = get_postgres_table(\"crsp\", \"StkSecurityInfoHist\"; wrds_conn=wrds_conn) |> DataFrame ","category":"page"},{"location":"demo/crsp_siz_to_ciz/#Datasets","page":"Transitioning to the new CRSP file format","title":"Datasets","text":"","category":"section"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"I do not fully understand the difference between stkmthsecuritydata and msf_v2 dataset (first is underlying data, second is somehow merged)","category":"page"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"In one of the transition slides, there is a dataset mapping from SIZ to CIZ and the final datasets DSF_V2 and MSF_V2. ","category":"page"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"SIZ CIZ WRDS\nDSF stkDlySecurityData DSF_V2\nMSF stkMthSecurityData MSF_V2\n  \nStockNames stkSecurityInfoHist StockNames_V2\n**DSE*** stkDelists \n**MSE*** stkDistributions \n  \nDSI indDlySeriesData(_ind) \nMSI indMthSeriesData(_ind) ","category":"page"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"We are going to use the postgres server directly so we load the relevant packages here","category":"page"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"import LibPQ: LibPQ.execute, LibPQ.Connection\nimport Tables: columntable","category":"page"},{"location":"demo/crsp_siz_to_ciz/#Main-Stock-Files","page":"Transitioning to the new CRSP file format","title":"Main Stock Files","text":"","category":"section"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"postgre_query = \"\"\"\nSELECT *\n    FROM crsp.msf_v2\n    WHERE mthcaldt >= '2000-01-01' AND mthcaldt <= '2002-01-01'\n\"\"\"\nmsf_v2 = execute(wrds_conn, postgre_query) |> columntable |> DataFrame\n\npostgre_query = \"\"\"\nSELECT *\n    FROM crsp.stkmthsecuritydata\n    WHERE mthcaldt >= '2000-01-01' AND mthcaldt <= '2002-01-01'\n\"\"\"\nstkmthsecuritydata = execute(wrds_conn, postgre_query) |> columntable |> DataFrame\nsetdiff(names(msf_v2), names(stkmthsecuritydata))","category":"page"},{"location":"demo/crsp_siz_to_ciz/#Information-on-Stocks","page":"Transitioning to the new CRSP file format","title":"Information on Stocks","text":"","category":"section"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"postgre_query = \"SELECT * FROM crsp.stkSecurityInfoHist\"\nstksecurityinfohist = execute(wrds_conn, postgre_query) |> columntable |> DataFrame\npostgre_query = \"SELECT * FROM crsp.stocknames_v2\"\nstocknames_v2 = execute(wrds_conn, postgre_query) |> columntable |> DataFrame\n\nnames(stksecurityinfohist)\nnames(stocknames_v2)","category":"page"},{"location":"demo/crsp_siz_to_ciz/#Index-Files","page":"Transitioning to the new CRSP file format","title":"Index Files","text":"","category":"section"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"indmthseriesdata = execute(wrds_conn, \"SELECT * FROM crsp.indmthseriesdata\") |> DataFrame\n\n# more information on indices\nindseriesinfohdr = execute(wrds_conn, \"SELECT * FROM crsp.IndSeriesInfoHdr\") |> DataFrame |> see\nindfamilyinfohdr = execute(wrds_conn, \"SELECT * FROM crsp.IndFamilyInfoHdr\") |> DataFrame |> see\nstkindmembership = execute(wrds_conn, \"SELECT * FROM crsp.stkindmembership_ind\") |> DataFrame |> see","category":"page"},{"location":"demo/crsp_siz_to_ciz/#Standard-Filters","page":"Transitioning to the new CRSP file format","title":"Standard Filters","text":"","category":"section"},{"location":"demo/crsp_siz_to_ciz/#CRSP-Share-Codes-Filters","page":"Transitioning to the new CRSP file format","title":"CRSP Share Codes Filters","text":"","category":"section"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"It is standard to impose in the legacy file that the share codes is either 10 or 11.  For transparency, CRSP replaced the variable SHRCD with multiple flags that convey the information more clearly. ","category":"page"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"First we are going to want to see the mapping in the metadata mapping table:","category":"page"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"@rsubset(siz_to_ciz, :sizitemname == \"SHRCD\")\n# see how the split is down precisely\nunique(@rsubset(siz_to_ciz, :sizitemname == \"SHRCD\"), :cizitemname)","category":"page"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"We have five different flags that correspond to the legacy share codes.  How to map specifically the share code: recall that the first digit 1 translates to \"ordinary common shares\" and the second digit 0 or 1 translates to securities which \"have not been further defined\" or \"need not be further defined\" respectively.","category":"page"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"The new flags are ShareType, SecurityType, SecuritySubType, USIncFlg, and IssuerType. We can look at ShareType in the metaFlagInfo table:","category":"page"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"@rsubset(flag_info, contains(:flagtypedesc, r\"share.*type\"i))","category":"page"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"We can view how they map ","category":"page"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"@p outerjoin(\n    unique(select(stock_names, :permno, :shrcd)),\n    unique(select(stock_info_hist, :permno, :sharetype, :securitytype, :securitysubtype, :usincflg, :issuertype)),\n    on = :permno) |>\n    @rsubset(__, :shrcd ∈ [10, 11]) |>\n    groupby(__, [:shrcd, :sharetype, :securitytype, :securitysubtype, :usincflg, :issuertype]) |>\n    combine(__, nrow)","category":"page"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"The mapping at this point is less than obvious, so we gather some more information on the meaning of the relevant flags:","category":"page"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"import Unicode\nfunction get_info_flag(flag_name::String) \n    innerjoin(flag_info,\n        select(unique(\n            @rsubset(flag_coverage, Unicode.normalize(:itemname, casefold=true)==Unicode.normalize(flag_name, casefold=true)), \n            :flagvalue), :flagkey),\n        on = :flagkey)\nend\n\nget_info_flag(\"ShareType\") |> see\nget_info_flag(\"SecurityType\") |> see\nget_info_flag(\"SecuritySubType\") |> see\nget_info_flag(\"USIncFlg\") |> see\nget_info_flag(\"IssuerType\") |> see","category":"page"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"To which it appears more clear that the proper mapping will be","category":"page"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"stock_info_hist_subset = @rsubset(stock_info_hist, \n    :sharetype ∈ [\"NS\", \"N/A\"], :securitytype==\"EQTY\", :securitysubtype==\"COM\", :issuertype ∈ [\"ACOR\", \"CORP\"], :usincflg==\"Y\")\n@p outerjoin(\n    unique(select(stock_names, :permno, :shrcd)),\n    unique(select(stock_info_hist_subset, :permno, :sharetype, :securitytype, :securitysubtype, :usincflg, :issuertype)),\n    on = :permno) |>\n    groupby(__, [:shrcd, :sharetype, :securitytype, :securitysubtype, :usincflg, :issuertype]) |>\n    combine(__, nrow)","category":"page"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"!!There still seems to be some discrepancy!! If we do not want to worry, we simply use the CRSP cross reference guide which leads us to this mapping table","category":"page"},{"location":"demo/crsp_siz_to_ciz/#Exchange-Filters","page":"Transitioning to the new CRSP file format","title":"Exchange Filters","text":"","category":"section"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"The legacy filters set the exchange code variable to 1, 2, or 3 (respectively for NYSE, ASE, or Nasdaq). There is almost a direct mapping for exchange filters, though it also relies on two flag variables conditionaltype and TradingStatusFlg to account for halted or suspended trading (which were previously -1 and -2). Thus new version of the filter would read:","category":"page"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"stock_info_hist_subset = @rsubset(stock_info_hist, :primaryexch ∈ [\"N\", \"A\", \"Q\"])\nunique(innerjoin(stock_names, select(stock_info_hist_subset, :permno, :primaryexch), on = :permno), [:exchcd, :primaryexch])","category":"page"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"To remove halted trading we can filter the additional flags:","category":"page"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"stock_info_hist_subset = @rsubset(stock_info_hist, \n    :primaryexch ∈ [\"N\", \"A\", \"Q\"], :conditionaltype == \"RW\", :tradingstatusflg == \"A\")\nget_info_flag(\"conditionaltype\") |> see\nget_info_flag(\"TradingStatusFlg\") |> see","category":"page"},{"location":"lib/public/#Public-Interface","page":"Public Interface","title":"Public Interface","text":"","category":"section"},{"location":"lib/public/#FinanceRoutines-Module","page":"Public Interface","title":"FinanceRoutines Module","text":"","category":"section"},{"location":"lib/public/","page":"Public Interface","title":"Public Interface","text":"Modules = [FinanceRoutines]\nPrivate = false","category":"page"},{"location":"lib/public/#FinanceRoutines.build_Funda!-Tuple{DataFrames.DataFrame}","page":"Public Interface","title":"FinanceRoutines.build_Funda!","text":"build_Funda!(df_funda::DataFrame; save)\n\nClean up the compustat funda file download from crsp (see import_Funda)\n\nArguments\n\ndf_funda::DataFrame: A standard dataframe with compustat data (minimum variables are in import_Funda)\n\nKeywords\n\nsave::String: Save a gzip version of the data on path $save/funda.csv.gz; Default does not save the data.\nclean_cols::Bool: Clean up the columns of the dataframe to be of type Float64; Default is false and leaves the Decimal type intact\n\nReturns\n\ndf_funda::DataFrame: DataFrame with compustat funda file \"cleaned\"\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.build_MSF!-Tuple{DataFrames.AbstractDataFrame}","page":"Public Interface","title":"FinanceRoutines.build_MSF!","text":"build_MSF!(df_msf::DataFrame; save, trim_cols, clean_cols, verbose)\n\nClean up the CRSP Monthly Stock File (see import_MSF)\n\nArguments\n\ndf::DataFrame: A standard dataframe with compustat data (minimum variables are in import_Funda)\n\nKeywords\n\nsave::String: Save a gzip version of the data on path $save/funda.csv.gz; Default does not save the data.\ntrim_cols::Bool: Only keep a subset of relevant columns in the final dataset\nclean_cols::Bool: Clean up the columns of the dataframe to be of type Float64; Default is false and leaves the Decimal type intact\n\nReturns\n\ndf::DataFrame: DataFrame with crsp MSF file \"cleaned\"\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.calculate_rolling_betas-Tuple{Any, Any}","page":"Public Interface","title":"FinanceRoutines.calculate_rolling_betas","text":"calculate_rolling_betas(y, x; window=60)\n\nCalculate rolling betas using window months of returns.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.estimate_price_GSW!-Tuple{DataFrames.DataFrame}","page":"Public Interface","title":"FinanceRoutines.estimate_price_GSW!","text":"estimate_price_GSW!\n\narguments\n\n- `maturity::Real`: in years\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.estimate_return_GSW!-Tuple{DataFrames.DataFrame}","page":"Public Interface","title":"FinanceRoutines.estimate_return_GSW!","text":"estimate_return_GSW!\n\narguments\n\n- `maturity::Real`: in years\n- `frequency::Symbol`: :daily, :monthly, :annual type\n- `type::Symbol`: :log or standard one-period arithmetic return\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.estimate_yield_GSW!-Tuple{DataFrames.DataFrame}","page":"Public Interface","title":"FinanceRoutines.estimate_yield_GSW!","text":"estimate_yield_GSW!\n\narguments\n\n- `maturity::Real`: in years\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.import_FF3-Tuple{Symbol}","page":"Public Interface","title":"FinanceRoutines.import_FF3","text":"import_FF3(frequency::Symbol)\n\nDownload and import the Fama-French 3 Factors from Ken French website.\n\nIf frequency is unspecified, import the monthly research returns. If frequency is :daily, import the daily research returns.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.import_Funda-Tuple{LibPQ.Connection}","page":"Public Interface","title":"FinanceRoutines.import_Funda","text":"import_Funda(wrds_conn; date_range, variables)\nimport_Funda(;\n    date_range::Tuple{Date, Date} = (Date(\"1900-01-01\"), Dates.today()),\n    variables::String = \"\", user=\"\", password=\"\")\n\nImport the funda file from CapitalIQ Compustat on WRDS Postgres server\n\nArguments\n\nwrds_conn::Connection: An existing Postgres connection to WRDS; creates one if empty\n\nKeywords\n\ndate_range::Tuple{Date, Date}: A tuple of dates to select data (limits the download size)\nvariables::Vector{String}: A vector of String of additional variable to include in the download\nuser::String: username to log into the WRDS cli; default to ask user for authentication\npassword::String: password to log into the WRDS cli\n\nReturns\n\ndf_funda::DataFrame: DataFrame with compustat funda file\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.import_GSW-Tuple{}","page":"Public Interface","title":"FinanceRoutines.import_GSW","text":"import_GSW(; date_range)\n\nGSW Curves\n\narguments\n\n- `date_range::Tuple{Date, Date}`: range for selection of data\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.import_MSF-Tuple{LibPQ.Connection}","page":"Public Interface","title":"FinanceRoutines.import_MSF","text":"import_MSF(wrds_conn; date_range, variables)\nimport_MSF(;\n    date_range::Tuple{Date, Date} = (Date(\"1900-01-01\"), Dates.today()),\n    variables::String = \"\", user=\"\", password=\"\")\n\nImport the CRSP Monthly Stock File (MSF) from CRSP on WRDS PostGre server\n\nArguments\n\nwrds_conn::Connection: An existing Postgres connection to WRDS; creates one if empty\n\nKeywords\n\ndate_range::Tuple{Date, Date}: A tuple of dates to select data (limits the download size)\nvariables::Vector{String}: A vector of String of additional variable to include in the download\n\nReturns\n\ndf_msf_final::DataFrame: DataFrame with msf crsp file\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.import_MSF_v2-Tuple{LibPQ.Connection}","page":"Public Interface","title":"FinanceRoutines.import_MSF_v2","text":"import_MSF_v2(wrds_conn; date_range, variables, logging_level)\nimport_MSF_v2(;\n    date_range::Tuple{Date, Date} = (Date(\"1900-01-01\"), Dates.today()),\n    variables::String = \"\", user=\"\", password=\"\")\n\nImport the CRSP Monthly Stock File (MSF) from CRSP on WRDS PostGres server from the version 2.0 CIZ files\n\nArguments\n\nwrds_conn::Connection: An existing Postgres connection to WRDS; creates one if empty\n\nKeywords\n\ndate_range::Tuple{Date, Date}: A tuple of dates to select data (limits the download size)\nvariables::Vector{String}: A vector of String of additional variable to include in the download\nlogging_level::Symbol: How to log results\n\nReturns\n\ndf_msf_final::DataFrame: DataFrame with msf crsp file\n\n\n\n\n\n","category":"method"},{"location":"#FinanceRoutines.jl","page":"Home","title":"FinanceRoutines.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Some useful tools to work with academic financial data in Julia","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package provides a collection of routines for academic finance work.  This is useful to get started with a clean copy of asset prices from CRSP and a ad-hoc merge with the accounting data from the Compustat Funda file. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"I have also added utilities to download treasury yield curves (GSW) and Fama-French research factors.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This is still very much work in progress: file issues for comments.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"FinanceRoutines.jl is a not yet a registered package. You can install it from github  via","category":"page"},{"location":"","page":"Home","title":"Home","text":"import Pkg\nPkg.add(\"https://github.com/eloualiche/FinanceRoutines.jl\")","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Using WRDS (CRSP, Compustat, etc)\nSee the WRDS User Guide for an introduction to using the package to download data from WRDS\nDemos to how this integrates into standard estimations\nSee how to estimate asset pricing betas in the Estimating Beta demo.\nBuild general queries for the WRDS postgres in Advanced WRDS","category":"page"},{"location":"#Other-Resources","page":"Home","title":"Other Resources","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"There are multiple online resources on using the WRDS Postgres database and build the standard finance and accounting datasets:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Ian D. Gow and Tony Ding: \"Empirical Research in Accounting: Tools and Methods\"; available here\nChen, Andrew Y. and Tom Zimmermann: \"Open Source Cross-Sectional Asset Pricing\"; 2022, 27:2; available here\nChristoph Scheuch, Stefan Voigt, Patrick Weiss: \"Tidy Finance with R\"; 2023; Chapman & Hall; available here","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"demo/wrds_advanced/#Advanced-WRDS","page":"Advanced WRDS","title":"Advanced WRDS","text":"","category":"section"},{"location":"demo/wrds_advanced/","page":"Advanced WRDS","title":"Advanced WRDS","text":"The package provides ready-built query to the postgres WRDS database.  The queries are the most common and used ones and allow to get a crsp/compustat dataset fairly quickly.","category":"page"},{"location":"demo/wrds_advanced/","page":"Advanced WRDS","title":"Advanced WRDS","text":"Some people will want to run their own queries.  This is a little outside the scope of the package but I keep this page as a list of examples that can be useful. Post an issue if you want to add to the list. ","category":"page"},{"location":"demo/wrds_advanced/","page":"Advanced WRDS","title":"Advanced WRDS","text":"We are always going to start by opening a connection to WRDS. So for the rest of the examples I will assume that we include the preamble","category":"page"},{"location":"demo/wrds_advanced/","page":"Advanced WRDS","title":"Advanced WRDS","text":"using FinanceRoutines\nusing DataFrames, DataPipes, Dates\nimport LibPQ\n\nusing Prototypes # see https://github.com/eloualiche/Prototypes.jl\nwrds_conn = FinanceRoutines.open_wrds_pg();","category":"page"},{"location":"demo/wrds_advanced/#CRSP:-Filtering-on-names","page":"Advanced WRDS","title":"CRSP: Filtering on names","text":"","category":"section"},{"location":"demo/wrds_advanced/","page":"Advanced WRDS","title":"Advanced WRDS","text":"To get information on what columns are available, query the information_schema:","category":"page"},{"location":"demo/wrds_advanced/","page":"Advanced WRDS","title":"Advanced WRDS","text":"postgre_query_columns= \"\"\"\n    SELECT *\n        FROM information_schema.columns\n    WHERE table_schema = 'crsp'\n      AND table_name   = 'StkSecurityInfoHist';\n\"\"\"\nmsenames_columns = @p LibPQ.execute(wrds_conn, postgre_query_msenames_columns) |> \n    DataFrame |> __.column_name |> sort ","category":"page"},{"location":"demo/wrds_advanced/","page":"Advanced WRDS","title":"Advanced WRDS","text":"Sometimes we want to know what are the tables available, for example the meta tables","category":"page"},{"location":"demo/wrds_advanced/","page":"Advanced WRDS","title":"Advanced WRDS","text":"postgre_query =  \"\"\"\nSELECT table_name, table_schema, table_type\n    FROM information_schema.tables\n    WHERE table_name LIKE 'meta%' AND table_schema = 'crsp'\n\"\"\"\nLibPQ.execute(wrds_conn, postgre_query) |> DataFrame ","category":"page"},{"location":"demo/wrds_advanced/","page":"Advanced WRDS","title":"Advanced WRDS","text":"Now imagine that we want to pull columns from the monthly stock file with the following conditions: a given time frame (e.g. the 2000s) and company names that contain \"AP\". We would get the permno that match from StkSecurityInfoHist and match it on the fly to msf ```julia postgrequery = \"\"\" SELECT msf.cusip, msf.permno, msf.mthcaldt, msf.mthprc, msf.mthret, msf.mthvol, msf.shrout, msf.siccd,        stkinfo.issuernm FROM crsp.msfv2 AS msf INNER JOIN crsp.StkSecurityInfoHist AS stkinfo    ON msf.permno = stkinfo.permno WHERE stkinfo.issuernm ~ '(^APPLE|TESLA)'   AND msf.mthcaldt >= '2010-01-01'   AND msf.mthcaldt <= '2019-12-31'; \"\"\" dfmsf = LibPQ.execute(wrdsconn, postgrequery) |> DataFrame tabulate(dfmsf, [:permno, :issuernm])","category":"page"},{"location":"demo/wrds_advanced/","page":"Advanced WRDS","title":"Advanced WRDS","text":"permno  issuernm                   │ Freq.  Percent  Cum           Hist. ────────────────────────────────────┼───────────────────────────────────────────────  14593   APPLE COMPUTER INC         │  600    29.2    29   ███████████████████████▉  14593   APPLE INC                  │  600    29.2    58   ███████████████████████▉  15338   APPLE HOSPITALITY REIT INC │  280    13.6    72   ███████████▏  93436   TESLA MOTORS INC           │  115     5.6    78   ████▋  93436   TESLA INC                  │  460    22.4    100  ██████████████████▎  ```","category":"page"},{"location":"man/wrds_guide/#WRDS-User-Guide","page":"WRDS User Guide","title":"WRDS User Guide","text":"","category":"section"},{"location":"man/wrds_guide/#Opening-a-WRDS-connection","page":"WRDS User Guide","title":"Opening a WRDS connection","text":"","category":"section"},{"location":"man/wrds_guide/","page":"WRDS User Guide","title":"WRDS User Guide","text":"Since we are about to download data from CRSP we set up a connection with our WRDS credentials","category":"page"},{"location":"man/wrds_guide/","page":"WRDS User Guide","title":"WRDS User Guide","text":"using FinanceRoutines\nusing DataFrames, Dates\nusing FixedEffectModels # for regressions\nwrds_conn = FinanceRoutines.open_wrds_pg()\nconst date_init = Date(\"2010-01-01\")","category":"page"},{"location":"man/wrds_guide/#Download-the-monthly-stock-file-from-CRSP","page":"WRDS User Guide","title":"Download the monthly stock file from CRSP","text":"","category":"section"},{"location":"man/wrds_guide/","page":"WRDS User Guide","title":"WRDS User Guide","text":"Import the monthly stock file","category":"page"},{"location":"man/wrds_guide/","page":"WRDS User Guide","title":"WRDS User Guide","text":"df_msf = import_MSF_v2(wrds_conn; date_range = (date_init, Dates.today())); \nselect!(df_msf, :permno, :mthcaldt=>:date, :datem, :mthret=>:ret, :mthcap)","category":"page"},{"location":"man/wrds_guide/","page":"WRDS User Guide","title":"WRDS User Guide","text":"If you are using the old SIZ MSF files","category":"page"},{"location":"man/wrds_guide/","page":"WRDS User Guide","title":"WRDS User Guide","text":"# Import the monthly stock file\ndf_msf = import_MSF(wrds_conn; date_range = (Date(\"1980-01-01\"), Dates.today())); \ndf_msf = build_MSF!(df_msf);    # Run common processing\n# keep only what we need from the MSF\nselect!(df_msf, :permno, :date, :datem, :ret, :mktcap)","category":"page"},{"location":"man/wrds_guide/#Download-the-annual-compustat-funda-file-from-WRDS","page":"WRDS User Guide","title":"Download the annual compustat funda file from WRDS","text":"","category":"section"},{"location":"man/wrds_guide/","page":"WRDS User Guide","title":"WRDS User Guide","text":"df_funda = import_Funda(wrds_conn; date_range = (date_init, Dates.today())); \nbuild_Funda!(df_funda);","category":"page"},{"location":"man/wrds_guide/#Merge-both-files-CRSP-MSF-and-Compustat-Funda","page":"WRDS User Guide","title":"Merge both files CRSP MSF and Compustat Funda","text":"","category":"section"},{"location":"man/wrds_guide/","page":"WRDS User Guide","title":"WRDS User Guide","text":"df_linktable = FinanceRoutines.import_ccm_link(wrds_conn)\ndf_msf = link_MSF(df_linktable, df_msf) # merge gvkey on monthly stock file\n# merge for a crsp/compustat merged file\ndf_ccm = innerjoin(df_msf, df_funda, on = [:gvkey, :datey], matchmissing=:notequal)","category":"page"}]
}
