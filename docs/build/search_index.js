var documenterSearchIndex = {"docs":
[{"location":"demo/beta/#Estimating-Beta","page":"Estimating Beta","title":"Estimating Beta","text":"","category":"section"},{"location":"lib/internals/#Package-Internals","page":"Package Internals","title":"Package Internals","text":"","category":"section"},{"location":"lib/internals/#FinanceRoutines-Module","page":"Package Internals","title":"FinanceRoutines Module","text":"","category":"section"},{"location":"lib/internals/","page":"Package Internals","title":"Package Internals","text":"Modules = [FinanceRoutines]\nPublic = false","category":"page"},{"location":"lib/internals/#FinanceRoutines.open_wrds_pg-Tuple{String, String}","page":"Package Internals","title":"FinanceRoutines.open_wrds_pg","text":"Open a Postgres connection on WRDS server\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#Public-Interface","page":"Public Interface","title":"Public Interface","text":"","category":"section"},{"location":"lib/public/#FinanceRoutines-Module","page":"Public Interface","title":"FinanceRoutines Module","text":"","category":"section"},{"location":"lib/public/","page":"Public Interface","title":"Public Interface","text":"Modules = [FinanceRoutines]\nPrivate = false","category":"page"},{"location":"lib/public/#FinanceRoutines.build_Funda!-Tuple{DataFrames.DataFrame}","page":"Public Interface","title":"FinanceRoutines.build_Funda!","text":"build_Funda!(df_funda::DataFrame; save)\n\nClean up the compustat funda file download from crsp (see import_Funda)\n\nArguments\n\ndf_funda::DataFrame: A standard dataframe with compustat data (minimum variables are in import_Funda)\n\nKeywords\n\nsave::String: Save a gzip version of the data on path $save/funda.csv.gz; Default does not save the data.\n\nReturns\n\ndf_funda::DataFrame: DataFrame with compustat funda file \"cleaned\"\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.build_MSF!-Tuple{DataFrames.DataFrame}","page":"Public Interface","title":"FinanceRoutines.build_MSF!","text":"build_MSF!(df_msf::DataFrame; save)\n\nClean up the CRSP Monthly Stock File (see import_MSF)\n\nArguments\n\ndf::DataFrame: A standard dataframe with compustat data (minimum variables are in import_Funda)\n\nKeywords\n\nsave::String: Save a gzip version of the data on path $save/funda.csv.gz; Default does not save the data.\ntrim_col::Bool: Only keep a subset of relevant columns in the final dataset\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.estimate_price_GSW!-Tuple{DataFrames.DataFrame}","page":"Public Interface","title":"FinanceRoutines.estimate_price_GSW!","text":"estimate_price_GSW!\n\narguments\n\n- `maturity::Real`: in years\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.estimate_return_GSW!-Tuple{DataFrames.DataFrame}","page":"Public Interface","title":"FinanceRoutines.estimate_return_GSW!","text":"estimate_return_GSW!\n\narguments\n\n- `maturity::Real`: in years\n- `frequency::Symbol`: :daily, :monthly, :annual type \n- `type::Symbol`: :log or standard one-period arithmetic return\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.estimate_yield_GSW!-Tuple{DataFrames.DataFrame}","page":"Public Interface","title":"FinanceRoutines.estimate_yield_GSW!","text":"estimate_yield_GSW!\n\narguments\n\n- `maturity::Real`: in years\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.import_FF3-Tuple{Symbol}","page":"Public Interface","title":"FinanceRoutines.import_FF3","text":"import_FF3(frequency::Symbol)\n\nDownload and import the Fama-French 3 Factors from Ken French website. \n\nIf frequency is unspecified, import the monthly research returns. If frequency is :daily, import the daily research returns. \n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.import_Funda-Tuple{LibPQ.Connection}","page":"Public Interface","title":"FinanceRoutines.import_Funda","text":"import_Funda(wrds_conn; date_range, variables)\nimport_Funda(; \n    date_range::Tuple{Date, Date} = (Date(\"1900-01-01\"), Dates.today()),\n    variables::String = \"\", user=\"\", password=\"\")\n\nImport the funda file from CapitalIQ Compustat on WRDS Postgres server\n\nArguments\n\nwrds_conn::Connection: An existing Postgres connection to WRDS; creates one if empty\n\nKeywords\n\ndate_range::Tuple{Date, Date}: A tuple of dates to select data (limits the download size)\nvariables::Vector{String}: A vector of String of additional variable to include in the download\nuser::String: username to log into the WRDS cli; default to ask user for authentication\npassword::String: password to log into the WRDS cli\n\nReturns\n\ndf_funda::DataFrame: DataFrame with compustat funda file\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.import_GSW-Tuple{}","page":"Public Interface","title":"FinanceRoutines.import_GSW","text":"import_GSW(; date_range)\n\nGSW Curves\n\narguments\n\n- `date_range::Tuple{Date, Date}`: range for selection of data\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.import_MSF-Tuple{LibPQ.Connection}","page":"Public Interface","title":"FinanceRoutines.import_MSF","text":"import_MSF(wrds_conn; date_range, variables)\nimport_MSF(; \n    date_range::Tuple{Date, Date} = (Date(\"1900-01-01\"), Dates.today()),\n    variables::String = \"\", user=\"\", password=\"\")\n\nImport the CRSP Monthly Stock File (MSF) from CRSP on WRDS PostGre server\n\nArguments\n\nwrds_conn::Connection: An existing Postgres connection to WRDS; creates one if empty\n\nKeywords\n\ndate_range::Tuple{Date, Date}: A tuple of dates to select data (limits the download size)\nvariables::Vector{String}: A vector of String of additional variable to include in the download\nuser::String: username to log into the WRDS cli; default to ask user for authentication\npassword::String: password to log into the WRDS cli\n\nReturns\n\ndf_msf_final::DataFrame: DataFrame with msf crsp file\n\n\n\n\n\n","category":"method"},{"location":"#FinanceRoutines.jl","page":"Home","title":"FinanceRoutines.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Some useful tools to work with academic financial data in Julia","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package provides a collection of source code lexers for various languages and markup formats and a selection of themes that can be used to customise the style of the formatted source code. Additional lexer definitions are straightforward to add and are based on the regular expression lexing mechanism used by Pygments.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"FinanceRoutines.jl is a not yet a registered package. You can install it from github  via","category":"page"},{"location":"","page":"Home","title":"Home","text":"import Pkg\nPkg.add(\"https://github.com/eloualiche/FinanceRoutines.jl\")","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Using WRDS (CRSP, Compustat, etc)\nSee the WRDS User Guide for an introduction to using the package to download data from WRDS\nSee the demo to how this integrates into standard estimations in the Estimating Beta demo.","category":"page"},{"location":"#Other-Resources","page":"Home","title":"Other Resources","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"index.md\"]\nDepth = 3","category":"page"},{"location":"#Functions","page":"Home","title":"Functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"import_Funda\nimport_MSF\nimport_FF3","category":"page"},{"location":"#FinanceRoutines.import_Funda","page":"Home","title":"FinanceRoutines.import_Funda","text":"import_Funda(wrds_conn; date_range, variables)\nimport_Funda(; \n    date_range::Tuple{Date, Date} = (Date(\"1900-01-01\"), Dates.today()),\n    variables::String = \"\", user=\"\", password=\"\")\n\nImport the funda file from CapitalIQ Compustat on WRDS Postgres server\n\nArguments\n\nwrds_conn::Connection: An existing Postgres connection to WRDS; creates one if empty\n\nKeywords\n\ndate_range::Tuple{Date, Date}: A tuple of dates to select data (limits the download size)\nvariables::Vector{String}: A vector of String of additional variable to include in the download\nuser::String: username to log into the WRDS cli; default to ask user for authentication\npassword::String: password to log into the WRDS cli\n\nReturns\n\ndf_funda::DataFrame: DataFrame with compustat funda file\n\n\n\n\n\n","category":"function"},{"location":"#FinanceRoutines.import_MSF","page":"Home","title":"FinanceRoutines.import_MSF","text":"import_MSF(wrds_conn; date_range, variables)\nimport_MSF(; \n    date_range::Tuple{Date, Date} = (Date(\"1900-01-01\"), Dates.today()),\n    variables::String = \"\", user=\"\", password=\"\")\n\nImport the CRSP Monthly Stock File (MSF) from CRSP on WRDS PostGre server\n\nArguments\n\nwrds_conn::Connection: An existing Postgres connection to WRDS; creates one if empty\n\nKeywords\n\ndate_range::Tuple{Date, Date}: A tuple of dates to select data (limits the download size)\nvariables::Vector{String}: A vector of String of additional variable to include in the download\nuser::String: username to log into the WRDS cli; default to ask user for authentication\npassword::String: password to log into the WRDS cli\n\nReturns\n\ndf_msf_final::DataFrame: DataFrame with msf crsp file\n\n\n\n\n\n","category":"function"},{"location":"#FinanceRoutines.import_FF3","page":"Home","title":"FinanceRoutines.import_FF3","text":"import_FF3(frequency::Symbol)\n\nDownload and import the Fama-French 3 Factors from Ken French website. \n\nIf frequency is unspecified, import the monthly research returns. If frequency is :daily, import the daily research returns. \n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"build_Funda!\nbuild_MSF!","category":"page"},{"location":"#FinanceRoutines.build_Funda!","page":"Home","title":"FinanceRoutines.build_Funda!","text":"build_Funda!(df_funda::DataFrame; save)\n\nClean up the compustat funda file download from crsp (see import_Funda)\n\nArguments\n\ndf_funda::DataFrame: A standard dataframe with compustat data (minimum variables are in import_Funda)\n\nKeywords\n\nsave::String: Save a gzip version of the data on path $save/funda.csv.gz; Default does not save the data.\n\nReturns\n\ndf_funda::DataFrame: DataFrame with compustat funda file \"cleaned\"\n\n\n\n\n\n","category":"function"},{"location":"#FinanceRoutines.build_MSF!","page":"Home","title":"FinanceRoutines.build_MSF!","text":"build_MSF!(df_msf::DataFrame; save)\n\nClean up the CRSP Monthly Stock File (see import_MSF)\n\nArguments\n\ndf::DataFrame: A standard dataframe with compustat data (minimum variables are in import_Funda)\n\nKeywords\n\nsave::String: Save a gzip version of the data on path $save/funda.csv.gz; Default does not save the data.\ntrim_col::Bool: Only keep a subset of relevant columns in the final dataset\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"FinanceRoutines.open_wrds_pg","category":"page"},{"location":"#FinanceRoutines.open_wrds_pg","page":"Home","title":"FinanceRoutines.open_wrds_pg","text":"Open a Postgres connection on WRDS server\n\n\n\n\n\n","category":"function"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"man/wrds_guide/#WRDS-User-Guide","page":"WRDS User Guide","title":"WRDS User Guide","text":"","category":"section"},{"location":"man/wrds_guide/","page":"WRDS User Guide","title":"WRDS User Guide","text":"using FinanceRoutines\n# Set up a wrds connection\nwrds_conn = FinanceRoutines.open_wrds_pg()\n\n# CRSP\ndf_msf = import_MSF(wrds_conn); # Import the monthly stock file\ndf_msf = build_MSF(df_msf); # Run common processing\n# Compustat\ndf_funda = import_Funda(wrds_conn);\ndf_funda = build_Funda(df_funda);\n# Merge both files\ndf_linktable = FinanceRoutines.import_ccm_link(wrds_conn)\ndf_msf = link_MSF(df_linktable, df_msf) # merge gvkey on monthly stock file\ndf_msf = innerjoin(df_msf, df_funda, on = [:gvkey, :date_y], matchmissing=:notequal)","category":"page"}]
}
