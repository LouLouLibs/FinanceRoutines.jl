var documenterSearchIndex = {"docs":
[{"location":"demo/beta/#Estimating-Stock-Betas","page":"Estimating Stock Betas","title":"Estimating Stock Betas","text":"","category":"section"},{"location":"demo/beta/","page":"Estimating Stock Betas","title":"Estimating Stock Betas","text":"This describes the step by step procedure to estimate betas stock by stock first unconditionally and then using rolling windows. We first download the monthly stock file.","category":"page"},{"location":"demo/beta/","page":"Estimating Stock Betas","title":"Estimating Stock Betas","text":"Since we are about to download data from CRSP we set up a connection with our WRDS credentials","category":"page"},{"location":"demo/beta/","page":"Estimating Stock Betas","title":"Estimating Stock Betas","text":"using FinanceRoutines\nusing DataFrames, DataPipes, Dates\nusing FixedEffectModels # for regressions\n\nconst wrds_conn = FinanceRoutines.open_wrds_pg()\nconst date_init = Date(\"1990-01-01\")","category":"page"},{"location":"demo/beta/","page":"Estimating Stock Betas","title":"Estimating Stock Betas","text":"We are ready to import the monthly stock file:","category":"page"},{"location":"demo/beta/","page":"Estimating Stock Betas","title":"Estimating Stock Betas","text":"@time df_msf_raw = import_MSF_v2(wrds_conn; date_range = (date_init, Dates.today())); ","category":"page"},{"location":"demo/beta/","page":"Estimating Stock Betas","title":"Estimating Stock Betas","text":"And the Fama-French three pricing factors from Ken French's website. This downloads directly data from Ken French's website and formats the data","category":"page"},{"location":"demo/beta/","page":"Estimating Stock Betas","title":"Estimating Stock Betas","text":"df_FF3 = import_FF3()\n# make sure the returns are expressed in the same unit as in the MSF\ntransform!(df_FF3, [:mktrf, :smb, :hml, :rf] .=> ByRow((x->x/100)), renamecols=false )","category":"page"},{"location":"demo/beta/#Unconditional-Stock-Betas","page":"Estimating Stock Betas","title":"Unconditional Stock Betas","text":"","category":"section"},{"location":"demo/beta/#Format-the-monthly-stock-file-from-CRSP","page":"Estimating Stock Betas","title":"Format the monthly stock file from CRSP","text":"","category":"section"},{"location":"demo/beta/","page":"Estimating Stock Betas","title":"Estimating Stock Betas","text":"# keep only what we need from the MSF\ndf_msf = select(df_msf_raw, :permno, :mthcaldt => :date, :datem, \n    [:mthret, :mthcap] .=> ByRow(passmissing(Float64)) .=> [:ret, :mthcap]) # convert from decimals","category":"page"},{"location":"demo/beta/#Merge-the-data-and-estimate-beta","page":"Estimating Stock Betas","title":"Merge the data and estimate beta","text":"","category":"section"},{"location":"demo/beta/","page":"Estimating Stock Betas","title":"Estimating Stock Betas","text":"# Merge the data\ndf_msf = leftjoin(df_msf, df_FF3, on = [:datem] )\n# Create excess return\ntransform!(df_msf, [:ret, :rf] => ( (r1, r0) -> r1 .- r0 ) => :ret_rf)\n\n# Estimate CAPM beta over the whole sample\nsort!(df_msf, [:permno, :date])\nfor subdf in groupby(df_msf, :permno)\n    if size(dropmissing(subdf, [:ret_rf, :mktrf]))[1] > 2\n        β_CAPM = coef(reg(subdf, @formula(ret_rf ~ mktrf)))[2]\n        subdf[:, :β_CAPM ] .= β_CAPM\n    else\n        subdf[:, :β_CAPM ] .= missing\n    end\nend\nselect(unique(df_msf, [:permno, :β_CAPM]), :permno, :β_CAPM)\n\n# Estimate 3 Factor betas\nfor subdf in groupby(df_msf, :permno)\n    if size(dropmissing(subdf, [:ret_rf, :mktrf, :smb, :hml]))[1] > 2\n        β_MKT, β_SMB, β_HML = coef(reg(subdf, @formula(ret_rf ~ mktrf + smb + hml)))[2:4]\n        subdf[:, :β_MKT ] .= β_MKT\n        subdf[:, :β_SMB ] .= β_SMB\n        subdf[:, :β_HML ] .= β_HML\n    else\n        subdf[:, :β_MKT ] .= missing; \n        subdf[:, :β_SMB ] .= missing; \n        subdf[:, :β_HML ] .= missing\n    end\nend\nunique(df_msf, r\"β\")\nselect(unique(df_msf, r\"β\"), :permno, :β_MKT, :β_SMB, :β_HML)","category":"page"},{"location":"demo/beta/#Rolling-Betas-for-Stocks","page":"Estimating Stock Betas","title":"Rolling Betas for Stocks","text":"","category":"section"},{"location":"demo/beta/","page":"Estimating Stock Betas","title":"Estimating Stock Betas","text":"I export a very simple function for rolling betas (see the test for examples). ","category":"page"},{"location":"demo/beta/","page":"Estimating Stock Betas","title":"Estimating Stock Betas","text":"First we prepare the basic dataset from the monthly stock file and the Fama-French risk factors for example","category":"page"},{"location":"demo/beta/","page":"Estimating Stock Betas","title":"Estimating Stock Betas","text":"# Get individual stock returns\ndf_msf = select(df_msf_raw, :permno, :mthcaldt => :date, :datem, \n    [:mthret, :mthcap] .=> ByRow(passmissing(Float64)) .=> [:ret, :mthcap]) # convert from decimals\n# merge and create excess returns\ndf_msf = leftjoin(df_msf, df_FF3, on = [:datem] )\ntransform!(df_msf, [:ret, :rf] => ( (r1, r0) -> r1 .- r0 ) => :ret_rf)\nsort!(df_msf, [:permno, :date])","category":"page"},{"location":"demo/beta/","page":"Estimating Stock Betas","title":"Estimating Stock Betas","text":"Now we are ready to run the regression using the function calculate_rolling_betas that the package exports","category":"page"},{"location":"demo/beta/","page":"Estimating Stock Betas","title":"Estimating Stock Betas","text":"insertcols!(df_msf, :a=>missing, :bMKT=>missing, :bSMB=>missing, :bHML=>missing)\n@time for subdf in groupby(df_msf, :permno)\n    β = calculate_rolling_betas(\n        [ones(nrow(subdf)) subdf.mktrf subdf.smb subdf.hml],\n        subdf.ret_rf; \n        window=60,         # 60 months\n        min_data=nothing,   # what is the minimum number of nonmissing data to return a proper number\n        method=:linalg\n    )\n    subdf[!, [:a, :bMKT, :bSMB, :bHML]] = β\nend\n\nimport Statistics: median, mean\n@p df_msf |> groupby(__, :datem) |> \n    combine(__, :bMKT .=> \n        [(x-> emptymissing(mean)(skipmissing(x))) (x-> emptymissing(median)(skipmissing(x)))] .=>\n        [:bMKT_mean :bMKT_median])","category":"page"},{"location":"demo/beta/","page":"Estimating Stock Betas","title":"Estimating Stock Betas","text":"Go make some coffee ... this takes a little while (~ 15mn on M2max macbook pro).  I don't think my method is super efficient ","category":"page"},{"location":"lib/internals/#Package-Internals","page":"Package Internals","title":"Package Internals","text":"","category":"section"},{"location":"lib/internals/#FinanceRoutines-Module","page":"Package Internals","title":"FinanceRoutines Module","text":"","category":"section"},{"location":"lib/internals/","page":"Package Internals","title":"Package Internals","text":"Modules = [FinanceRoutines]\nPublic = false","category":"page"},{"location":"lib/internals/#FinanceRoutines._clean_gsw_data-Tuple{DataFrames.DataFrame, Union{Nothing, Tuple{Dates.Date, Dates.Date}}}","page":"Package Internals","title":"FinanceRoutines._clean_gsw_data","text":"_clean_gsw_data(df_raw, date_range)\n\nClean and format the raw GSW data from the Federal Reserve.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#FinanceRoutines._extract_params-Tuple{GSWParameters}","page":"Package Internals","title":"FinanceRoutines._extract_params","text":"_extract_params(params::GSWParameters)\n\nExtract parameters as tuple for use in calculation functions. For 3-factor models, uses τ₁ for both decay parameters and sets β₃=0.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#FinanceRoutines._maturity_to_column_name-Tuple{String, Real}","page":"Package Internals","title":"FinanceRoutines._maturity_to_column_name","text":"_maturity_to_column_name(prefix, maturity)\n\nConvert maturity to standardized column name.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#FinanceRoutines._safe_parse_float-Tuple{Any}","page":"Package Internals","title":"FinanceRoutines._safe_parse_float","text":"_safe_parse_float(value)\n\nSafely parse a value to Float64, returning missing for unparseable values. Handles common flag values for missing data in economic datasets.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#FinanceRoutines._validate_gsw_data-Tuple{DataFrames.DataFrame}","page":"Package Internals","title":"FinanceRoutines._validate_gsw_data","text":"_validate_gsw_data(df)\n\nValidate the cleaned GSW data for basic quality checks.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#FinanceRoutines._validate_gsw_dataframe-Tuple{DataFrames.DataFrame}","page":"Package Internals","title":"FinanceRoutines._validate_gsw_dataframe","text":"_validate_gsw_dataframe(df; check_date=false)\n\nValidate that DataFrame has required GSW parameter columns.\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#FinanceRoutines.add_excess_returns!-Tuple{DataFrames.DataFrame, Real}","page":"Package Internals","title":"FinanceRoutines.add_excess_returns!","text":"add_excess_returns!(df, maturity; risk_free_maturity=0.25, frequency=:daily, return_type=:log, validate=true)\n\nAdd excess return calculations (bond return - risk-free return) to DataFrame.\n\nArguments\n\nSame as add_returns! plus:\nrisk_free_maturity::Real: Maturity for risk-free rate (default: 0.25 for 3-month)\n\nReturns\n\nDataFrame: Modified DataFrame with excess return column named excess_ret_Xy_frequency\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#FinanceRoutines.add_prices!-Tuple{DataFrames.DataFrame, Union{Real, AbstractVector{<:Real}}}","page":"Package Internals","title":"FinanceRoutines.add_prices!","text":"add_prices!(df, maturities; face_value=100.0, validate=true)\n\nAdd zero-coupon bond price calculations to a DataFrame containing GSW parameters.\n\nArguments\n\ndf::DataFrame: DataFrame containing GSW parameters\nmaturities::Union{Real, AbstractVector{<:Real}}: Maturity or vector of maturities in years\nface_value::Real: Face value of bonds (default: 100.0)\nvalidate::Bool: Whether to validate DataFrame structure (default: true)\n\nReturns\n\nDataFrame: Modified DataFrame with additional price columns named price_Xy\n\nExamples\n\ndf = import_gsw_parameters()\n\n# Add prices for multiple maturities\nadd_prices!(df, [1, 5, 10])\n\n# Add prices with different face value\nadd_prices!(df, 10.0, face_value=1000.0)\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#FinanceRoutines.add_returns!-Tuple{DataFrames.DataFrame, Real}","page":"Package Internals","title":"FinanceRoutines.add_returns!","text":"add_returns!(df, maturity; frequency=:daily, return_type=:log, validate=true)\n\nAdd bond return calculations to a DataFrame containing GSW parameters.\n\nCalculates returns by comparing bond prices across time periods. Requires DataFrame  to be sorted by date and contain consecutive time periods.\n\nArguments\n\ndf::DataFrame: DataFrame containing GSW parameters and dates (must have :date column)\nmaturity::Real: Bond maturity in years\nfrequency::Symbol: Return frequency (:daily, :monthly, :annual)\nreturn_type::Symbol: :log for log returns, :arithmetic for simple returns\nvalidate::Bool: Whether to validate DataFrame structure (default: true)\n\nReturns\n\nDataFrame: Modified DataFrame with return column named ret_Xy_frequency  (e.g., ret_10y_daily, ret_5y_monthly)\n\nExamples\n\ndf = import_gsw_parameters()\n\n# Add daily log returns for 10-year bond\nadd_returns!(df, 10.0)\n\n# Add monthly arithmetic returns for 5-year bond  \nadd_returns!(df, 5.0, frequency=:monthly, return_type=:arithmetic)\n\nNotes\n\nRequires DataFrame to be sorted by date\nFirst row will have missing return (no previous period)\nUses lag of parameters to calculate returns properly\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#FinanceRoutines.add_yields!-Tuple{DataFrames.DataFrame, Union{Real, AbstractVector{<:Real}}}","page":"Package Internals","title":"FinanceRoutines.add_yields!","text":"add_yields!(df, maturities; validate=true)\n\nAdd yield calculations to a DataFrame containing GSW parameters.\n\nAdds columns with yields for specified maturities using the Nelson-Siegel-Svensson  model parameters in the DataFrame.\n\nArguments\n\ndf::DataFrame: DataFrame containing GSW parameters (must have columns: BETA0, BETA1, BETA2, BETA3, TAU1, TAU2)\nmaturities::Union{Real, AbstractVector{<:Real}}: Maturity or vector of maturities in years\nvalidate::Bool: Whether to validate DataFrame structure (default: true)\n\nReturns\n\nDataFrame: Modified DataFrame with additional yield columns named yield_Xy (e.g., yield_1y, yield_10y)\n\nExamples\n\ndf = import_gsw_parameters()\n\n# Add single maturity\nadd_yields!(df, 10.0)\n\n# Add multiple maturities  \nadd_yields!(df, [1, 2, 5, 10, 30])\n\n# Add with custom maturity (fractional)\nadd_yields!(df, [0.25, 0.5, 1.0])\n\nNotes\n\nModifies the DataFrame in place\nColumn names use format: yield_Xy where X is the maturity\nHandles missing parameter values gracefully\nValidates required columns are present\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#FinanceRoutines.gsw_curve_snapshot-NTuple{6, Real}","page":"Package Internals","title":"FinanceRoutines.gsw_curve_snapshot","text":"gsw_curve_snapshot(β₀, β₁, β₂, β₃, τ₁, τ₂; maturities=[0.25, 0.5, 1, 2, 5, 10, 30])\n\nCreate a snapshot DataFrame of yields and prices for a single date's GSW parameters.\n\nArguments\n\nβ₀, β₁, β₂, β₃, τ₁, τ₂: GSW parameters for a single date\nmaturities::AbstractVector: Vector of maturities to calculate (default: standard curve)\n\nReturns\n\nDataFrame: Contains columns :maturity, :yield, :price\n\nExamples\n\n# Create yield curve snapshot\ncurve = gsw_curve_snapshot(5.0, -2.0, 1.5, 0.8, 2.5, 0.5)\n\n# Custom maturities\ncurve = gsw_curve_snapshot(5.0, -2.0, 1.5, 0.8, 2.5, 0.5, \n                          maturities=[0.5, 1, 3, 5, 7, 10, 20, 30])\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#FinanceRoutines.gsw_curve_snapshot-Tuple{GSWParameters}","page":"Package Internals","title":"FinanceRoutines.gsw_curve_snapshot","text":"gsw_curve_snapshot(params::GSWParameters; maturities=[0.25, 0.5, 1, 2, 5, 10, 30])\n\nCreate a snapshot DataFrame of yields and prices for GSW parameters using parameter struct.\n\nArguments\n\nparams::GSWParameters: GSW parameter struct\nmaturities::AbstractVector: Vector of maturities to calculate (default: standard curve)\n\nReturns\n\nDataFrame: Contains columns :maturity, :yield, :price\n\nExamples\n\nparams = GSWParameters(5.0, -2.0, 1.5, 0.8, 2.5, 0.5)\ncurve = gsw_curve_snapshot(params)\n\n# Custom maturities\ncurve = gsw_curve_snapshot(params, maturities=[0.5, 1, 3, 5, 7, 10, 20, 30])\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#FinanceRoutines.import_ccm_link-Tuple{LibPQ.Connection}","page":"Package Internals","title":"FinanceRoutines.import_ccm_link","text":"import_ccm_link(wrds_conn::Connection)\nimport_ccm_link(; user::String=\"\", password::String=\"\")\n\nImport and process the CRSP/Compustat Merged (CCM) linking table from WRDS.\n\nDownloads the CCM linking table that maps between CRSP's PERMNO and Compustat's GVKEY  identifiers, enabling cross-database research between CRSP and Compustat datasets.\n\nArguments\n\nMethod 1\n\nwrds_conn::Connection: An established database connection to WRDS PostgreSQL server\n\nMethod 2 (Keyword Arguments)\n\nuser::String=\"\": WRDS username. If empty, attempts to use default connection via open_wrds_pg()\npassword::String=\"\": WRDS password. Only used if user is provided\n\nReturns\n\nDataFrame: Processed linking table with the following columns:\n:gvkey: Compustat's permanent company identifier (converted to Int)\n:permno: CRSP's permanent security identifier (renamed from :lpermno)\n:linkdt: Start date of the link validity period\n:linkenddt: End date of the link validity period (missing values set to today's date)\n:linkprim: Primary link marker (String3 type)\n:liid: IID of the linked CRSP issue (String3 type)\n:linktype: Type of link (String3 type)\nAdditional columns from the original CRSP.CCMXPF_LNKHIST table\n\nProcessing Steps\n\nDownloads the complete CRSP.CCMXPF_LNKHIST table from WRDS\nConverts integer columns to proper Int type (handling missing values)\nParses GVKEY from string to integer format\nConverts link descriptors to String3 type for efficiency\nFilters to keep only primary links:\nLink types: \"LU\" (US companies), \"LC\" (Canadian), \"LS\" (ADRs)\nLink primary: \"P\" (Primary) or \"C\" (Primary after CUSIP link)\nSets missing end dates to today's date (assuming link is still active)\nRenames :lpermno to :permno for consistency\n\nExamples\n\n# Using existing connection\nwrds_conn = open_wrds_pg(\"myusername\", \"mypassword\")\ndf_linktable = import_ccm_link(wrds_conn)\n\n# Using automatic connection\ndf_linktable = import_ccm_link()\n\n# Using credentials directly\ndf_linktable = import_ccm_link(user=\"myusername\", password=\"mypassword\")\n\nNotes\n\nRequires active WRDS subscription and PostgreSQL access\nOnly primary security links are retained (see WRDS CCM documentation for link type details)\nMissing link end dates are interpreted as currently active links\nThe function uses @p macro for pipeline operations and @debug for logging\nAll date columns (:linkdt, :linkenddt) and :permno are set as non-missing\n\nReferences\n\nWRDS CCM Database documentation: https://wrds-www.wharton.upenn.edu/pages/support/manuals-and-overviews/crsp/crspcompustat-merged-ccm/\n\nSee also: link_Funda, link_MSF, open_wrds_pg\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#FinanceRoutines.is_three_factor_model-Tuple{GSWParameters}","page":"Package Internals","title":"FinanceRoutines.is_three_factor_model","text":"is_three_factor_model(params::GSWParameters)\n\nCheck if GSW parameters represent a 3-factor Nelson-Siegel model (missing β₃ and τ₂).\n\nReturns\n\nBool: true if this is a 3-factor model, false if 4-factor Svensson model\n\n\n\n\n\n","category":"method"},{"location":"lib/internals/#FinanceRoutines.open_wrds_pg-Tuple{AbstractString, AbstractString}","page":"Package Internals","title":"FinanceRoutines.open_wrds_pg","text":"Open a Postgres connection on WRDS server\n\n\n\n\n\n","category":"method"},{"location":"man/yield_curve_gsw/#Import-Yield-Curve-Data","page":"Import Yield Curve Data","title":"Import Yield Curve Data","text":"","category":"section"},{"location":"man/yield_curve_gsw/","page":"Import Yield Curve Data","title":"Import Yield Curve Data","text":"Some utilities for working with Gürkaynak-Sack-Wright (GSW) yield curve data from the New York Fed and Nelson-Siegel-Svensson model calculations. Note that some of the code was first written by hand and then reimplemented using AI; while I have tested some functions, you may want to do your own sanity checks. ","category":"page"},{"location":"man/yield_curve_gsw/#Overview","page":"Import Yield Curve Data","title":"Overview","text":"","category":"section"},{"location":"man/yield_curve_gsw/","page":"Import Yield Curve Data","title":"Import Yield Curve Data","text":"This package provides tools to:","category":"page"},{"location":"man/yield_curve_gsw/","page":"Import Yield Curve Data","title":"Import Yield Curve Data","text":"Import daily GSW yield curve parameters from the Federal Reserve\nCalculate yields, prices, and returns using Nelson-Siegel-Svensson models\nHandle both 3-factor (Nelson-Siegel) and 4-factor (Svensson) model periods\nWork with time series of bond returns and risk premiums","category":"page"},{"location":"man/yield_curve_gsw/#Installation","page":"Import Yield Curve Data","title":"Installation","text":"","category":"section"},{"location":"man/yield_curve_gsw/","page":"Import Yield Curve Data","title":"Import Yield Curve Data","text":"using FinanceRoutines; # Pkg.add(url=\"https://github.com/eloualiche/FinanceRoutines.jl\")","category":"page"},{"location":"man/yield_curve_gsw/#Quick-Start","page":"Import Yield Curve Data","title":"Quick Start","text":"","category":"section"},{"location":"man/yield_curve_gsw/","page":"Import Yield Curve Data","title":"Import Yield Curve Data","text":"# Import GSW parameters from the Fed\ndf = import_gsw_parameters(date_range=(Date(\"1960-01-01\"), Dates.today()) )\n\n# Add yield calculations for multiple maturities\nFinanceRoutines.add_yields!(df, [1, 2, 5, 10, 30])\n\n# Add bond prices\nFinanceRoutines.add_prices!(df, [1, 5, 10])\n\n# Calculate daily returns for 10-year bonds\nFinanceRoutines.add_returns!(df, 10.0, frequency=:daily, return_type=:log)\n# Calculate excess returns over 3-month rate\nFinanceRoutines.add_excess_returns!(df, 10.0, risk_free_maturity=0.25)","category":"page"},{"location":"man/yield_curve_gsw/#Core-Types","page":"Import Yield Curve Data","title":"Core Types","text":"","category":"section"},{"location":"man/yield_curve_gsw/#GSWParameters","page":"Import Yield Curve Data","title":"GSWParameters","text":"","category":"section"},{"location":"man/yield_curve_gsw/","page":"Import Yield Curve Data","title":"Import Yield Curve Data","text":"Structure to hold Nelson-Siegel-Svensson model parameters:","category":"page"},{"location":"man/yield_curve_gsw/","page":"Import Yield Curve Data","title":"Import Yield Curve Data","text":"# 4-factor Svensson model\nparams = GSWParameters(5.0, -2.0, 1.5, 0.8, 2.5, 0.5)\n\n# 3-factor Nelson-Siegel model (missing β₃, τ₂)\nparams_3f = GSWParameters(5.0, -2.0, 1.5, missing, 2.5, missing)\n\n# From DataFrame row\nparams = GSWParameters(df[1, :])","category":"page"},{"location":"man/yield_curve_gsw/#Core-Functions","page":"Import Yield Curve Data","title":"Core Functions","text":"","category":"section"},{"location":"man/yield_curve_gsw/#Data-Import","page":"Import Yield Curve Data","title":"Data Import","text":"","category":"section"},{"location":"man/yield_curve_gsw/","page":"Import Yield Curve Data","title":"Import Yield Curve Data","text":"# Import all available data\ndf = import_gsw_parameters()\n\n# Import specific date range\ndf = import_gsw_parameters(date_range=(Date(\"2010-01-01\"), Date(\"2020-12-31\")))","category":"page"},{"location":"man/yield_curve_gsw/#Yield-Calculations","page":"Import Yield Curve Data","title":"Yield Calculations","text":"","category":"section"},{"location":"man/yield_curve_gsw/","page":"Import Yield Curve Data","title":"Import Yield Curve Data","text":"# Single yield calculation\nyield = gsw_yield(10.0, params)  # 10-year yield\nyield = gsw_yield(10.0, 5.0, -2.0, 1.5, 0.8, 2.5, 0.5)  # Using individual parameters\n\n# Yield curve\nmaturities = [0.25, 0.5, 1, 2, 5, 10, 30]\nyields = gsw_yield_curve(maturities, params)","category":"page"},{"location":"man/yield_curve_gsw/#Price-Calculations","page":"Import Yield Curve Data","title":"Price Calculations","text":"","category":"section"},{"location":"man/yield_curve_gsw/","page":"Import Yield Curve Data","title":"Import Yield Curve Data","text":"# Zero-coupon bond prices\nprice = gsw_price(10.0, params)  # 10-year zero price\nprice = gsw_price(10.0, params, face_value=100.0)  # Custom face value\n\n# Price curve\nprices = gsw_price_curve(maturities, params)","category":"page"},{"location":"man/yield_curve_gsw/#Return-Calculations","page":"Import Yield Curve Data","title":"Return Calculations","text":"","category":"section"},{"location":"man/yield_curve_gsw/","page":"Import Yield Curve Data","title":"Import Yield Curve Data","text":"# Bond returns between two periods\nparams_today = GSWParameters(5.0, -2.0, 1.5, 0.8, 2.5, 0.5)\nparams_yesterday = GSWParameters(4.9, -1.9, 1.4, 0.9, 2.4, 0.6)\n\n# Daily log return\nret = gsw_return(10.0, params_today, params_yesterday)\n\n# Monthly arithmetic return\nret = gsw_return(10.0, params_today, params_yesterday, \n                frequency=:monthly, return_type=:arithmetic)\n\n# Excess return over risk-free rate\nexcess_ret = gsw_excess_return(10.0, params_today, params_yesterday)","category":"page"},{"location":"man/yield_curve_gsw/#Forward-Rates","page":"Import Yield Curve Data","title":"Forward Rates","text":"","category":"section"},{"location":"man/yield_curve_gsw/","page":"Import Yield Curve Data","title":"Import Yield Curve Data","text":"# 1-year forward rate starting in 2 years\nfwd_rate = gsw_forward_rate(2.0, 3.0, params)","category":"page"},{"location":"man/yield_curve_gsw/#DataFrame-Operations","page":"Import Yield Curve Data","title":"DataFrame Operations","text":"","category":"section"},{"location":"man/yield_curve_gsw/#Adding-Calculations-to-DataFrames","page":"Import Yield Curve Data","title":"Adding Calculations to DataFrames","text":"","category":"section"},{"location":"man/yield_curve_gsw/","page":"Import Yield Curve Data","title":"Import Yield Curve Data","text":"# Add yields for multiple maturities\nFinanceRoutines.add_yields!(df, [1, 2, 5, 10, 30])\n\n# Add prices with custom face value\nFinanceRoutines.add_prices!(df, [1, 5, 10], face_value=100.0)\n\n# Add daily log returns\nFinanceRoutines.add_returns!(df, 10.0, frequency=:daily, return_type=:log)\n\n# Add monthly arithmetic returns\nFinanceRoutines.add_returns!(df, 5.0, frequency=:monthly, return_type=:arithmetic)\n\n# Add excess returns\nFinanceRoutines.add_excess_returns!(df, 10.0, risk_free_maturity=0.25)","category":"page"},{"location":"man/yield_curve_gsw/#Column-Names","page":"Import Yield Curve Data","title":"Column Names","text":"","category":"section"},{"location":"man/yield_curve_gsw/","page":"Import Yield Curve Data","title":"Import Yield Curve Data","text":"The package creates standardized column names:","category":"page"},{"location":"man/yield_curve_gsw/","page":"Import Yield Curve Data","title":"Import Yield Curve Data","text":"Yields: yield_1y, yield_10y, yield_0.5y\nPrices: price_1y, price_10y, price_0.5y\nReturns: ret_10y_daily, ret_5y_monthly\nExcess returns: excess_ret_10y_daily","category":"page"},{"location":"man/yield_curve_gsw/#Convenience-Functions","page":"Import Yield Curve Data","title":"Convenience Functions","text":"","category":"section"},{"location":"man/yield_curve_gsw/#Yield-Curve-Snapshots","page":"Import Yield Curve Data","title":"Yield Curve Snapshots","text":"","category":"section"},{"location":"man/yield_curve_gsw/","page":"Import Yield Curve Data","title":"Import Yield Curve Data","text":"# Create yield curve for a single date\ncurve = FinanceRoutines.gsw_curve_snapshot(params)\ncurve = FinanceRoutines.gsw_curve_snapshot(5.0, -2.0, 1.5, 0.8, 2.5, 0.5)\n\n# Custom maturities\ncurve = FinanceRoutines.gsw_curve_snapshot(params, maturities=[1, 3, 5, 7, 10, 20, 30])","category":"page"},{"location":"man/yield_curve_gsw/#Model-Specifications","page":"Import Yield Curve Data","title":"Model Specifications","text":"","category":"section"},{"location":"man/yield_curve_gsw/","page":"Import Yield Curve Data","title":"Import Yield Curve Data","text":"The package automatically handles two model types:","category":"page"},{"location":"man/yield_curve_gsw/#Factor-Svensson-Model","page":"Import Yield Curve Data","title":"4-Factor Svensson Model","text":"","category":"section"},{"location":"man/yield_curve_gsw/","page":"Import Yield Curve Data","title":"Import Yield Curve Data","text":"Uses all 6 parameters: β₀, β₁, β₂, β₃, τ₁, τ₂\nMore flexible yield curve shapes\nUsed in recent periods","category":"page"},{"location":"man/yield_curve_gsw/#Factor-Nelson-Siegel-Model","page":"Import Yield Curve Data","title":"3-Factor Nelson-Siegel Model","text":"","category":"section"},{"location":"man/yield_curve_gsw/","page":"Import Yield Curve Data","title":"Import Yield Curve Data","text":"Uses 4 parameters: β₀, β₁, β₂, τ₁ (β₃=0, τ₂=τ₁)\nSimpler model specification\nUsed in earlier periods or when data is missing","category":"page"},{"location":"man/yield_curve_gsw/","page":"Import Yield Curve Data","title":"Import Yield Curve Data","text":"The package automatically detects which model to use based on available parameters.","category":"page"},{"location":"man/yield_curve_gsw/#Missing-Data-Handling","page":"Import Yield Curve Data","title":"Missing Data Handling","text":"","category":"section"},{"location":"man/yield_curve_gsw/","page":"Import Yield Curve Data","title":"Import Yield Curve Data","text":"Automatically converts -999 flag values to missing\nGracefully handles periods with missing τ₂/β₃ parameters\nPropagates missing values through calculations appropriately","category":"page"},{"location":"man/yield_curve_gsw/#Example-Analysis","page":"Import Yield Curve Data","title":"Example Analysis","text":"","category":"section"},{"location":"man/yield_curve_gsw/","page":"Import Yield Curve Data","title":"Import Yield Curve Data","text":"using DataFrames, Statistics\n\n# Import data for 1970s and 1980s\ndf = import_gsw_parameters(date_range=(Date(\"1970-01-01\"), Date(\"1989-12-31\")))\n\n# Add calculations\nFinanceRoutines.add_yields!(df, 1)  # 1-year yields\nFinanceRoutines.add_prices!(df, 1)  # 1-year prices  \nFinanceRoutines.add_returns!(df, 2, frequency=:daily, return_type=:log)  # 2-year daily returns\n\n# Analyze by decade\ntransform!(df, :date => (x -> year.(x) .÷ 10 * 10) => :decade)\n\n# Summary statistics\nstats = combine(\n    groupby(df, :decade),\n    :yield_1y => (x -> mean(skipmissing(x))) => :mean_yield,\n    :yield_1y => (x -> std(skipmissing(x))) => :vol_yield,\n    :ret_2y_daily => (x -> mean(skipmissing(x))) => :mean_return,\n    :ret_2y_daily => (x -> std(skipmissing(x))) => :vol_return\n)","category":"page"},{"location":"man/yield_curve_gsw/#API","page":"Import Yield Curve Data","title":"API","text":"","category":"section"},{"location":"man/yield_curve_gsw/#Data-Source","page":"Import Yield Curve Data","title":"Data Source","text":"","category":"section"},{"location":"man/yield_curve_gsw/","page":"Import Yield Curve Data","title":"Import Yield Curve Data","text":"GSW yield curve parameters are downloaded from the Federal Reserve Economic Data (FRED):","category":"page"},{"location":"man/yield_curve_gsw/","page":"Import Yield Curve Data","title":"Import Yield Curve Data","text":"URL: https://www.federalreserve.gov/data/yield-curve-tables/feds200628.csv\nUpdated daily\nHistorical data available from 1961","category":"page"},{"location":"man/yield_curve_gsw/#References","page":"Import Yield Curve Data","title":"References","text":"","category":"section"},{"location":"man/yield_curve_gsw/","page":"Import Yield Curve Data","title":"Import Yield Curve Data","text":"Gürkaynak, R. S., B. Sack, and J. H. Wright (2007). \"The U.S. Treasury yield curve: 1961 to the present.\" Journal of Monetary Economics 54(8), 2291-2304.\nNelson, C. R. and A. F. Siegel (1987). \"Parsimonious modeling of yield curves.\" Journal of Business 60(4), 473-489.\nSvensson, L. E. (1994). \"Estimating and interpreting forward interest rates: Sweden 1992-1994.\" NBER Working Paper No. 4871.","category":"page"},{"location":"demo/crsp_siz_to_ciz/#Transitioning-to-the-new-CRSP-file-format","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"","category":"section"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"CRSP is changing the way they disseminate price data. This is mostly relevant for the daily and monthly stock price data.","category":"page"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"General information and code examples are available on WRDS Website. I try to provide a short guide about how I went about converting some of the most basic crsp filters to the new format. Note that the legacy files are named SIZ (CRSP 1.0) and the new file format is CIZ (CRSP 2.0). ","category":"page"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"WRDS has excellent guides, and what follows is mainly for my reference and how we would do this simply in julia. crsp-ciz-faq","category":"page"},{"location":"demo/crsp_siz_to_ciz/#Getting-mapping-tables-from-old-to-new-formats","page":"Transitioning to the new CRSP file format","title":"Getting mapping tables from old to new formats","text":"","category":"section"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"First, I am going to reference the main mapping and metadata tables that allow to quickly convert old code into modern one. These tables are available from the WRDS postgres server","category":"page"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"using FinanceRoutines\nusing DataPipes, DataFrames, DataFramesMeta, DataPipes\nimport LibPQ: LibPQ.execute, LibPQ.Connection # to connect directly to the server\nimport Tables: columntable\n\nwrds_conn = FinanceRoutines.open_wrds_pg(); # open a wrds connection with credentials\nsee(df) = show(df, allcols=true, allrows=true, truncate=0) # to view df without column truncation","category":"page"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"const get_postgres_table = FinanceRoutines.get_postgres_table\n# main table for converting columns\nsiz_to_ciz = get_postgres_table(\"crsp\", \"metasiztociz\"; wrds_conn=wrds_conn) |> DataFrame \n# flag information\nflag_info = get_postgres_table(\"crsp\", \"metaFlagInfo\"; wrds_conn=wrds_conn) |> DataFrame \nflag_coverage = get_postgres_table(\"crsp\", \"metaFlagCoverage\"; wrds_conn=wrds_conn) |> DataFrame \nitem_info = get_postgres_table(\"crsp\", \"metaItemInfo\"; wrds_conn=wrds_conn) |> DataFrame \n\nstock_names = get_postgres_table(\"crsp\", \"stocknames\"; wrds_conn=wrds_conn) |> DataFrame \nstock_info_hist = get_postgres_table(\"crsp\", \"StkSecurityInfoHist\"; wrds_conn=wrds_conn) |> DataFrame ","category":"page"},{"location":"demo/crsp_siz_to_ciz/#Datasets","page":"Transitioning to the new CRSP file format","title":"Datasets","text":"","category":"section"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"I do not fully understand the difference between stkmthsecuritydata and msf_v2 dataset (first is underlying data, second is somehow merged)","category":"page"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"In one of the transition slides, there is a dataset mapping from SIZ to CIZ and the final datasets DSF_V2 and MSF_V2. ","category":"page"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"Old File Format: MSF 1.0 or SIZ New File Format: MSF 2.0 CIZ WRDS\nDSF stkDlySecurityData DSF_V2\nMSF stkMthSecurityData MSF_V2\n  \nStockNames stkSecurityInfoHist StockNames_V2\nDSE stkDelists \nMSE stkDistributions \n  \nDSI indDlySeriesData(_ind) \nMSI indMthSeriesData(_ind) \n––––––––––––––––––- ––––––––––––––––– –––––––––","category":"page"},{"location":"demo/crsp_siz_to_ciz/#Main-Stock-Files","page":"Transitioning to the new CRSP file format","title":"Main Stock Files","text":"","category":"section"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"postgre_query = \"\"\"\nSELECT *\n    FROM crsp.msf_v2\n    WHERE mthcaldt >= '2000-01-01' AND mthcaldt <= '2002-01-01'\n\"\"\"\nmsf_v2 = execute(wrds_conn, postgre_query) |> columntable |> DataFrame\n\npostgre_query = \"\"\"\nSELECT *\n    FROM crsp.stkmthsecuritydata\n    WHERE mthcaldt >= '2000-01-01' AND mthcaldt <= '2002-01-01'\n\"\"\"\nstkmthsecuritydata = execute(wrds_conn, postgre_query) |> columntable |> DataFrame\nsetdiff(names(msf_v2), names(stkmthsecuritydata))","category":"page"},{"location":"demo/crsp_siz_to_ciz/#Information-on-Stocks","page":"Transitioning to the new CRSP file format","title":"Information on Stocks","text":"","category":"section"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"postgre_query = \"SELECT * FROM crsp.stkSecurityInfoHist\"\nstksecurityinfohist = execute(wrds_conn, postgre_query) |> columntable |> DataFrame\npostgre_query = \"SELECT * FROM crsp.stocknames_v2\"\nstocknames_v2 = execute(wrds_conn, postgre_query) |> columntable |> DataFrame\n\nnames(stksecurityinfohist)\nnames(stocknames_v2)","category":"page"},{"location":"demo/crsp_siz_to_ciz/#Index-Files","page":"Transitioning to the new CRSP file format","title":"Index Files","text":"","category":"section"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"indmthseriesdata = execute(wrds_conn, \"SELECT * FROM crsp.indmthseriesdata\") |> DataFrame\n\n# more information on indices\nindseriesinfohdr = execute(wrds_conn, \"SELECT * FROM crsp.IndSeriesInfoHdr\") |> DataFrame |> see\nindfamilyinfohdr = execute(wrds_conn, \"SELECT * FROM crsp.IndFamilyInfoHdr\") |> DataFrame |> see\nstkindmembership = execute(wrds_conn, \"SELECT * FROM crsp.stkindmembership_ind\") |> DataFrame |> see","category":"page"},{"location":"demo/crsp_siz_to_ciz/#Standard-Filters","page":"Transitioning to the new CRSP file format","title":"Standard Filters","text":"","category":"section"},{"location":"demo/crsp_siz_to_ciz/#CRSP-Share-Codes-Filters","page":"Transitioning to the new CRSP file format","title":"CRSP Share Codes Filters","text":"","category":"section"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"It is standard to impose in the legacy file that the share codes is either 10 or 11.  For transparency, CRSP replaced the variable SHRCD with multiple flags that convey the information more clearly. ","category":"page"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"First we are going to want to see the mapping in the metadata mapping table:","category":"page"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"@rsubset(siz_to_ciz, :sizitemname == \"SHRCD\")\n# see how the split is down precisely\nunique(@rsubset(siz_to_ciz, :sizitemname == \"SHRCD\"), :cizitemname)","category":"page"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"We have five different flags that correspond to the legacy share codes.  How to map specifically the share code: recall that the first digit 1 translates to \"ordinary common shares\" and the second digit 0 or 1 translates to securities which \"have not been further defined\" or \"need not be further defined\" respectively.","category":"page"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"The new flags are ShareType, SecurityType, SecuritySubType, USIncFlg, and IssuerType. We can look at ShareType in the metaFlagInfo table:","category":"page"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"@rsubset(flag_info, contains(:flagtypedesc, r\"share.*type\"i))","category":"page"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"We can view how they map ","category":"page"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"@p outerjoin(\n    unique(select(stock_names, :permno, :shrcd)),\n    unique(select(stock_info_hist, :permno, :sharetype, :securitytype, :securitysubtype, :usincflg, :issuertype)),\n    on = :permno) |>\n    @rsubset(__, :shrcd ∈ [10, 11]) |>\n    groupby(__, [:shrcd, :sharetype, :securitytype, :securitysubtype, :usincflg, :issuertype]) |>\n    combine(__, nrow)","category":"page"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"The mapping at this point is less than obvious, so we gather some more information on the meaning of the relevant flags:","category":"page"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"import Unicode\nfunction get_info_flag(flag_name::String) \n    innerjoin(flag_info,\n        select(unique(\n            @rsubset(flag_coverage, Unicode.normalize(:itemname, casefold=true)==Unicode.normalize(flag_name, casefold=true)), \n            :flagvalue), :flagkey),\n        on = :flagkey)\nend\n\nget_info_flag(\"ShareType\") |> see\nget_info_flag(\"SecurityType\") |> see\nget_info_flag(\"SecuritySubType\") |> see\nget_info_flag(\"USIncFlg\") |> see\nget_info_flag(\"IssuerType\") |> see","category":"page"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"To which it appears more clear that the proper mapping will be","category":"page"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"stock_info_hist_subset = @rsubset(stock_info_hist, \n    :sharetype ∈ [\"NS\", \"N/A\"], :securitytype==\"EQTY\", :securitysubtype==\"COM\", :issuertype ∈ [\"ACOR\", \"CORP\"], :usincflg==\"Y\")\n@p outerjoin(\n    unique(select(stock_names, :permno, :shrcd)),\n    unique(select(stock_info_hist_subset, :permno, :sharetype, :securitytype, :securitysubtype, :usincflg, :issuertype)),\n    on = :permno) |>\n    groupby(__, [:shrcd, :sharetype, :securitytype, :securitysubtype, :usincflg, :issuertype]) |>\n    combine(__, nrow)","category":"page"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"!!There still seems to be some discrepancy!! If we do not want to worry, we simply use the CRSP cross reference guide which leads us to this mapping table","category":"page"},{"location":"demo/crsp_siz_to_ciz/#Exchange-Filters","page":"Transitioning to the new CRSP file format","title":"Exchange Filters","text":"","category":"section"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"The legacy filters set the exchange code variable to 1, 2, or 3 (respectively for NYSE, ASE, or Nasdaq). There is almost a direct mapping for exchange filters, though it also relies on two flag variables conditionaltype and TradingStatusFlg to account for halted or suspended trading (which were previously -1 and -2). Thus new version of the filter would read:","category":"page"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"stock_info_hist_subset = @rsubset(stock_info_hist, :primaryexch ∈ [\"N\", \"A\", \"Q\"])\nunique(innerjoin(stock_names, select(stock_info_hist_subset, :permno, :primaryexch), on = :permno), [:exchcd, :primaryexch])","category":"page"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"To remove halted trading we can filter the additional flags:","category":"page"},{"location":"demo/crsp_siz_to_ciz/","page":"Transitioning to the new CRSP file format","title":"Transitioning to the new CRSP file format","text":"stock_info_hist_subset = @rsubset(stock_info_hist, \n    :primaryexch ∈ [\"N\", \"A\", \"Q\"], :conditionaltype == \"RW\", :tradingstatusflg == \"A\")\nget_info_flag(\"conditionaltype\") |> see\nget_info_flag(\"TradingStatusFlg\") |> see","category":"page"},{"location":"lib/public/#Public-Interface","page":"Public Interface","title":"Public Interface","text":"","category":"section"},{"location":"lib/public/#FinanceRoutines-Module","page":"Public Interface","title":"FinanceRoutines Module","text":"","category":"section"},{"location":"lib/public/","page":"Public Interface","title":"Public Interface","text":"Modules = [FinanceRoutines]\nPrivate = false","category":"page"},{"location":"lib/public/#FinanceRoutines.GSWParameters","page":"Public Interface","title":"FinanceRoutines.GSWParameters","text":"GSWParameters\n\nStructure to hold Gürkaynak-Sack-Wright Nelson-Siegel-Svensson model parameters.\n\nFields\n\nβ₀::Float64: Level parameter (BETA0)\nβ₁::Float64: Slope parameter (BETA1) \nβ₂::Float64: Curvature parameter (BETA2)\nβ₃::Float64: Second curvature parameter (BETA3) - may be missing if model uses 3-factor version\nτ₁::Float64: First decay parameter (TAU1, must be positive)\nτ₂::Float64: Second decay parameter (TAU2, must be positive) - may be missing if model uses 3-factor version\n\nExamples\n\n# Create GSW parameters manually (4-factor model)\nparams = GSWParameters(5.0, -2.0, 1.5, 0.8, 2.5, 0.5)\n\n# Create GSW parameters for 3-factor model (when τ₂/β₃ are missing)\nparams_3factor = GSWParameters(5.0, -2.0, 1.5, missing, 2.5, missing)\n\n# Create from DataFrame row\ndf = import_gsw_parameters()\nparams = GSWParameters(df[1, :])  # First row\n\n# Access individual parameters\nprintln(\"Level: \", params.β₀)\nprintln(\"Slope: \", params.β₁)\n\nNotes\n\nConstructor validates that available decay parameters are positive\nHandles missing values for τ₂ and β₃ (common when using 3-factor Nelson-Siegel model)\nWhen τ₂ or β₃ are missing, the model degenerates to the 3-factor Nelson-Siegel form\nCan be constructed from DataFrameRow for convenience\n\n\n\n\n\n","category":"type"},{"location":"lib/public/#FinanceRoutines.GSWParameters-Tuple{DataFrames.DataFrameRow}","page":"Public Interface","title":"FinanceRoutines.GSWParameters","text":"GSWParameters(row::DataFrameRow)\n\nCreate GSWParameters from a DataFrame row containing BETA0, BETA1, BETA2, BETA3, TAU1, TAU2 columns. Handles missing values (including -999 flags) gracefully.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.GSWParameters-Tuple{NamedTuple}","page":"Public Interface","title":"FinanceRoutines.GSWParameters","text":"GSWParameters(row::NamedTuple)\n\nCreate GSWParameters from a NamedTuple containing the required fields. Handles missing values (including -999 flags) gracefully.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.build_Funda!-Tuple{DataFrames.DataFrame}","page":"Public Interface","title":"FinanceRoutines.build_Funda!","text":"build_Funda!(df_funda::DataFrame; save)\n\nClean up the compustat funda file download from crsp (see import_Funda)\n\nArguments\n\ndf_funda::DataFrame: A standard dataframe with compustat data (minimum variables are in import_Funda)\n\nKeywords\n\nsave::String: Save a gzip version of the data on path $save/funda.csv.gz; Default does not save the data.\nclean_cols::Bool: Clean up the columns of the dataframe to be of type Float64; Default is false and leaves the Decimal type intact\n\nReturns\n\ndf_funda::DataFrame: DataFrame with compustat funda file \"cleaned\"\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.build_MSF!-Tuple{DataFrames.AbstractDataFrame}","page":"Public Interface","title":"FinanceRoutines.build_MSF!","text":"build_MSF!(df_msf::DataFrame; save, trim_cols, clean_cols, verbose)\n\nClean up the CRSP Monthly Stock File (see import_MSF)\n\nArguments\n\ndf::DataFrame: A standard dataframe with compustat data (minimum variables are in import_Funda)\n\nKeywords\n\nsave::String: Save a gzip version of the data on path $save/funda.csv.gz; Default does not save the data.\ntrim_cols::Bool: Only keep a subset of relevant columns in the final dataset\nclean_cols::Bool: Clean up the columns of the dataframe to be of type Float64; Default is false and leaves the Decimal type intact\n\nReturns\n\ndf::DataFrame: DataFrame with crsp MSF file \"cleaned\"\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.calculate_rolling_betas-Tuple{Any, Any}","page":"Public Interface","title":"FinanceRoutines.calculate_rolling_betas","text":"calculate_rolling_betas(y, x; window=60)\n\nCalculate rolling betas using window months of returns.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.gsw_excess_return-NTuple{13, Real}","page":"Public Interface","title":"FinanceRoutines.gsw_excess_return","text":"gsw_excess_return(maturity, β₀_t, β₁_t, β₂_t, β₃_t, τ₁_t, τ₂_t,\n                  β₀_t₋₁, β₁_t₋₁, β₂_t₋₁, β₃_t₋₁, τ₁_t₋₁, τ₂_t₋₁;\n                  risk_free_maturity=0.25, frequency=:daily, return_type=:log)\n\nCalculate excess return of a bond over the risk-free rate.\n\nArguments\n\nSame as gsw_return plus:\nrisk_free_maturity::Real: Maturity for risk-free rate calculation (default: 0.25 for 3-month)\n\nReturns\n\nFloat64: Excess return (bond return - risk-free return)\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.gsw_excess_return-Tuple{Real, GSWParameters, GSWParameters}","page":"Public Interface","title":"FinanceRoutines.gsw_excess_return","text":"gsw_excess_return(maturity, params_t::GSWParameters, params_t₋₁::GSWParameters; \n                  risk_free_maturity=0.25, frequency=:daily, return_type=:log)\n\nCalculate excess return of a bond over the risk-free rate using GSW parameter structs.\n\nArguments\n\nmaturity::Real: Original maturity of the bond in years\nparams_t::GSWParameters: GSW parameters at time t\nparams_t₋₁::GSWParameters: GSW parameters at time t-1\nrisk_free_maturity::Real: Maturity for risk-free rate calculation (default: 0.25 for 3-month)\nfrequency::Symbol: Return frequency (:daily, :monthly, :annual)\nreturn_type::Symbol: :log for log returns, :arithmetic for simple returns\n\nReturns\n\nFloat64: Excess return (bond return - risk-free return)\n\nExamples\n\nparams_today = GSWParameters(5.0, -2.0, 1.5, 0.8, 2.5, 0.5)\nparams_yesterday = GSWParameters(4.9, -1.9, 1.4, 0.9, 2.4, 0.6)\nexcess_ret = gsw_excess_return(10.0, params_today, params_yesterday)\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.gsw_forward_rate-NTuple{8, Real}","page":"Public Interface","title":"FinanceRoutines.gsw_forward_rate","text":"gsw_forward_rate(maturity₁, maturity₂, β₀, β₁, β₂, β₃, τ₁, τ₂)\n\nCalculate instantaneous forward rate between two maturities using GSW parameters.\n\nArguments\n\nmaturity₁::Real: Start maturity in years (must be positive and < maturity₂)\nmaturity₂::Real: End maturity in years (must be positive and > maturity₁)\nβ₀, β₁, β₂, β₃, τ₁, τ₂: GSW parameters\n\nReturns\n\nFloat64: Forward rate (decimal rate)\n\nExamples\n\n# Calculate 1-year forward rate starting in 2 years\nfwd_rate = gsw_forward_rate(2.0, 3.0, 5.0, -2.0, 1.5, 0.8, 2.5, 0.5)\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.gsw_forward_rate-Tuple{Real, Real, GSWParameters}","page":"Public Interface","title":"FinanceRoutines.gsw_forward_rate","text":"gsw_forward_rate(maturity₁, maturity₂, params::GSWParameters)\n\nCalculate instantaneous forward rate between two maturities using GSW parameter struct.\n\nArguments\n\nmaturity₁::Real: Start maturity in years (must be positive and < maturity₂)\nmaturity₂::Real: End maturity in years (must be positive and > maturity₁)\nparams::GSWParameters: GSW parameter struct\n\nReturns\n\nFloat64: Forward rate (decimal rate)\n\nExamples\n\nparams = GSWParameters(5.0, -2.0, 1.5, 0.8, 2.5, 0.5)\nfwd_rate = gsw_forward_rate(2.0, 3.0, params)\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.gsw_price-NTuple{7, Real}","page":"Public Interface","title":"FinanceRoutines.gsw_price","text":"gsw_price(maturity, β₀, β₁, β₂, β₃, τ₁, τ₂; face_value=1.0)\n\nCalculate zero-coupon bond price from GSW Nelson-Siegel-Svensson parameters.\n\nComputes the price of a zero-coupon bond using the yield derived from GSW parameters.\n\nArguments\n\nmaturity::Real: Time to maturity in years (must be positive)\nβ₀::Real: Level parameter (BETA0)\nβ₁::Real: Slope parameter (BETA1)\nβ₂::Real: Curvature parameter (BETA2) \nβ₃::Real: Second curvature parameter (BETA3)\nτ₁::Real: First decay parameter \nτ₂::Real: Second decay parameter\nface_value::Real: Face value of the bond (default: 1.0)\n\nReturns\n\nFloat64: Bond price\n\nThrows\n\nArgumentError: If maturity is non-positive, τ parameters are non-positive, or face_value is non-positive\n\nExamples\n\n# Calculate price of 1-year zero-coupon bond\nprice = gsw_price(1.0, 5.0, -2.0, 1.5, 0.8, 2.5, 0.5)\n\n# Calculate price with different face value\nprice = gsw_price(1.0, 5.0, -2.0, 1.5, 0.8, 2.5, 0.5, face_value=1000.0)\n\nNotes\n\nUses continuous compounding: P = F * exp(-r * t)\nYield is converted from percentage to decimal for calculation\nFunction is vectorizable: use gsw_price.(maturities, β₀, β₁, β₂, β₃, τ₁, τ₂)\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.gsw_price-Tuple{Real, GSWParameters}","page":"Public Interface","title":"FinanceRoutines.gsw_price","text":"gsw_price(maturity, params::GSWParameters; face_value=1.0)\n\nCalculate zero-coupon bond price from GSW parameters using parameter struct.\n\nArguments\n\nmaturity::Real: Time to maturity in years (must be positive)\nparams::GSWParameters: GSW parameter struct\nface_value::Real: Face value of the bond (default: 1.0)\n\nReturns\n\nFloat64: Bond price\n\nExamples\n\nparams = GSWParameters(5.0, -2.0, 1.5, 0.8, 2.5, 0.5)\nprice = gsw_price(10.0, params)\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.gsw_price_curve-Tuple{AbstractVector{<:Real}, GSWParameters}","page":"Public Interface","title":"FinanceRoutines.gsw_price_curve","text":"gsw_price_curve(maturities, params::GSWParameters; face_value=1.0)\n\nCalculate zero-coupon bond prices for multiple maturities using GSW parameter struct.\n\nArguments\n\nmaturities::AbstractVector{<:Real}: Vector of maturities in years\nparams::GSWParameters: GSW parameter struct\nface_value::Real: Face value of bonds (default: 1.0)\n\nReturns\n\nVector{Float64}: Vector of bond prices\n\nExamples\n\nparams = GSWParameters(5.0, -2.0, 1.5, 0.8, 2.5, 0.5)\nmaturities = [0.25, 0.5, 1, 2, 5, 10, 30]\nprices = gsw_price_curve(maturities, params)\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.gsw_price_curve-Tuple{AbstractVector{<:Real}, Vararg{Real, 6}}","page":"Public Interface","title":"FinanceRoutines.gsw_price_curve","text":"gsw_price_curve(maturities, β₀, β₁, β₂, β₃, τ₁, τ₂; face_value=1.0)\n\nCalculate zero-coupon bond prices for multiple maturities using GSW parameters.\n\nArguments\n\nmaturities::AbstractVector{<:Real}: Vector of maturities in years\nβ₀, β₁, β₂, β₃, τ₁, τ₂: GSW parameters\nface_value::Real: Face value of bonds (default: 1.0)\n\nReturns\n\nVector{Float64}: Vector of bond prices\n\nExamples\n\nmaturities = [0.25, 0.5, 1, 2, 5, 10, 30]\nprices = gsw_price_curve(maturities, 5.0, -2.0, 1.5, 0.8, 2.5, 0.5)\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.gsw_return-NTuple{13, Real}","page":"Public Interface","title":"FinanceRoutines.gsw_return","text":"gsw_return(maturity, β₀_t, β₁_t, β₂_t, β₃_t, τ₁_t, τ₂_t, \n           β₀_t₋₁, β₁_t₋₁, β₂_t₋₁, β₃_t₋₁, τ₁_t₋₁, τ₂_t₋₁;\n           frequency=:daily, return_type=:log)\n\nCalculate bond return between two periods using GSW parameters.\n\nComputes the return on a zero-coupon bond between two time periods by comparing the price today (with aged maturity) to the price in the previous period.\n\nArguments\n\nmaturity::Real: Original maturity of the bond in years\nβ₀_t, β₁_t, β₂_t, β₃_t, τ₁_t, τ₂_t: GSW parameters at time t\nβ₀_t₋₁, β₁_t₋₁, β₂_t₋₁, β₃_t₋₁, τ₁_t₋₁, τ₂_t₋₁: GSW parameters at time t-1\nfrequency::Symbol: Return frequency (:daily, :monthly, :annual)\nreturn_type::Symbol: :log for log returns, :arithmetic for simple returns\n\nReturns\n\nFloat64: Bond return\n\nExamples\n\n# Daily log return on 10-year bond\nret = gsw_return(10.0, 5.0, -2.0, 1.5, 0.8, 2.5, 0.5,  # today's params\n                      4.9, -1.9, 1.4, 0.9, 2.4, 0.6)   # yesterday's params\n\n# Monthly arithmetic return\nret = gsw_return(5.0, 5.0, -2.0, 1.5, 0.8, 2.5, 0.5,\n                     4.9, -1.9, 1.4, 0.9, 2.4, 0.6,\n                     frequency=:monthly, return_type=:arithmetic)\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.gsw_return-Tuple{Real, GSWParameters, GSWParameters}","page":"Public Interface","title":"FinanceRoutines.gsw_return","text":"gsw_return(maturity, params_t::GSWParameters, params_t₋₁::GSWParameters; frequency=:daily, return_type=:log)\n\nCalculate bond return between two periods using GSW parameter structs.\n\nArguments\n\nmaturity::Real: Original maturity of the bond in years\nparams_t::GSWParameters: GSW parameters at time t\nparams_t₋₁::GSWParameters: GSW parameters at time t-1\nfrequency::Symbol: Return frequency (:daily, :monthly, :annual)\nreturn_type::Symbol: :log for log returns, :arithmetic for simple returns\n\nReturns\n\nFloat64: Bond return\n\nExamples\n\nparams_today = GSWParameters(5.0, -2.0, 1.5, 0.8, 2.5, 0.5)\nparams_yesterday = GSWParameters(4.9, -1.9, 1.4, 0.9, 2.4, 0.6)\nret = gsw_return(10.0, params_today, params_yesterday)\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.gsw_yield-NTuple{7, Real}","page":"Public Interface","title":"FinanceRoutines.gsw_yield","text":"gsw_yield(maturity, β₀, β₁, β₂, β₃, τ₁, τ₂)\n\nCalculate yield from Gürkaynak-Sack-Wright Nelson-Siegel-Svensson parameters.\n\nComputes the yield for a given maturity using the Nelson-Siegel-Svensson functional form with the GSW parameter estimates. Automatically handles 3-factor vs 4-factor models.\n\nArguments\n\nmaturity::Real: Time to maturity in years (must be positive)\nβ₀::Real: Level parameter (BETA0)\nβ₁::Real: Slope parameter (BETA1) \nβ₂::Real: Curvature parameter (BETA2)\nβ₃::Real: Second curvature parameter (BETA3) - set to 0 or missing for 3-factor model\nτ₁::Real: First decay parameter \nτ₂::Real: Second decay parameter - can equal τ₁ for 3-factor model\n\nReturns\n\nFloat64: Yield in percent (e.g., 5.0 for 5%)\n\nThrows\n\nArgumentError: If maturity is non-positive or τ parameters are non-positive\n\nExamples\n\n# Calculate 1-year yield (4-factor model)\nyield = gsw_yield(1.0, 5.0, -2.0, 1.5, 0.8, 2.5, 0.5)\n\n# Calculate 10-year yield (3-factor model, β₃=0)\nyield = gsw_yield(10.0, 5.0, -2.0, 1.5, 0.0, 2.5, 2.5)\n\nNotes\n\nBased on the Nelson-Siegel-Svensson functional form\nWhen β₃=0 or τ₂=τ₁, degenerates to 3-factor Nelson-Siegel model\nReturns yield in percentage terms (not decimal)\nFunction is vectorizable: use gsw_yield.(maturities, β₀, β₁, β₂, β₃, τ₁, τ₂)\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.gsw_yield-Tuple{Real, GSWParameters}","page":"Public Interface","title":"FinanceRoutines.gsw_yield","text":"gsw_yield(maturity, params::GSWParameters)\n\nCalculate yield from GSW Nelson-Siegel-Svensson parameters using parameter struct.\n\nArguments\n\nmaturity::Real: Time to maturity in years (must be positive)\nparams::GSWParameters: GSW parameter struct\n\nReturns\n\nFloat64: Yield in percent (e.g., 5.0 for 5%)\n\nExamples\n\nparams = GSWParameters(5.0, -2.0, 1.5, 0.8, 2.5, 0.5)\nyield = gsw_yield(10.0, params)\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.gsw_yield_curve-Tuple{AbstractVector{<:Real}, GSWParameters}","page":"Public Interface","title":"FinanceRoutines.gsw_yield_curve","text":"gsw_yield_curve(maturities, params::GSWParameters)\n\nCalculate yields for multiple maturities using GSW parameter struct.\n\nArguments\n\nmaturities::AbstractVector{<:Real}: Vector of maturities in years\nparams::GSWParameters: GSW parameter struct\n\nReturns\n\nVector{Float64}: Vector of yields in percent\n\nExamples\n\nparams = GSWParameters(5.0, -2.0, 1.5, 0.8, 2.5, 0.5)\nmaturities = [0.25, 0.5, 1, 2, 5, 10, 30]\nyields = gsw_yield_curve(maturities, params)\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.gsw_yield_curve-Tuple{AbstractVector{<:Real}, Vararg{Real, 6}}","page":"Public Interface","title":"FinanceRoutines.gsw_yield_curve","text":"gsw_yield_curve(maturities, β₀, β₁, β₂, β₃, τ₁, τ₂)\n\nCalculate yields for multiple maturities using GSW parameters.\n\nArguments\n\nmaturities::AbstractVector{<:Real}: Vector of maturities in years\nβ₀, β₁, β₂, β₃, τ₁, τ₂: GSW parameters\n\nReturns\n\nVector{Float64}: Vector of yields in percent\n\nExamples\n\nmaturities = [0.25, 0.5, 1, 2, 5, 10, 30]\nyields = gsw_yield_curve(maturities, 5.0, -2.0, 1.5, 0.8, 2.5, 0.5)\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.import_FF3-Tuple{}","page":"Public Interface","title":"FinanceRoutines.import_FF3","text":"import_FF3(;frequency::Symbol=:monthly) -> DataFrame\n\nImport Fama-French 3-factor model data directly from Ken French's data library.\n\nDownloads and parses the Fama-French research data factors (market risk premium,  size factor, value factor, and risk-free rate) at the specified frequency.\n\nArguments\n\nfrequency::Symbol=:monthly: Data frequency to import. Options are:\n:monthly - Monthly factor returns (default)\n:annual - Annual factor returns  \n:daily - Daily factor returns\n\nReturns\n\nDataFrame: Fama-French 3-factor data with columns:\nMonthly/Annual: datem/datey, mktrf, smb, hml, rf\nDaily: date, mktrf, smb, hml, rf\n\nWhere:\n\nmktrf: Market return minus risk-free rate (market risk premium)\nsmb: Small minus big (size factor) \nhml: High minus low (value factor)\nrf: Risk-free rate\n\nExamples\n\n# Import monthly data (default)\nmonthly_ff = import_FF3()\n\n# Import annual data\nannual_ff = import_FF3(frequency=:annual)\n\n# Import daily data\ndaily_ff = import_FF3(frequency=:daily)\n\nNotes\n\nData is sourced directly from Kenneth French's data library at Dartmouth\nMonthly and annual data excludes the daily/monthly breakdowns respectively\nDate formats are automatically parsed to appropriate Julia date types\nMissing values are filtered out from the datasets\nRequires internet connection to download data\n\nData Source\n\nKenneth R. French Data Library: https://mba.tuck.dartmouth.edu/pages/faculty/ken.french/data_library.html\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.import_Funda-Tuple{LibPQ.Connection}","page":"Public Interface","title":"FinanceRoutines.import_Funda","text":"import_Funda(wrds_conn; date_range, variables)\nimport_Funda(;\n    date_range::Tuple{Date, Date} = (Date(\"1900-01-01\"), Dates.today()),\n    variables::String = \"\", user=\"\", password=\"\")\n\nImport the funda file from CapitalIQ Compustat on WRDS Postgres server\n\nArguments\n\nwrds_conn::Connection: An existing Postgres connection to WRDS; creates one if empty\n\nKeywords\n\ndate_range::Tuple{Date, Date}: A tuple of dates to select data (limits the download size)\nvariables::Vector{String}: A vector of String of additional variable to include in the download\nuser::String: username to log into the WRDS cli; default to ask user for authentication\npassword::String: password to log into the WRDS cli\n\nReturns\n\ndf_funda::DataFrame: DataFrame with compustat funda file\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.import_MSF-Tuple{LibPQ.Connection}","page":"Public Interface","title":"FinanceRoutines.import_MSF","text":"import_MSF(wrds_conn; date_range, variables)\nimport_MSF(;\n    date_range::Tuple{Date, Date} = (Date(\"1900-01-01\"), Dates.today()),\n    variables::String = \"\", user=\"\", password=\"\")\n\nImport the CRSP Monthly Stock File (MSF) from CRSP on WRDS PostGre server\n\nArguments\n\nwrds_conn::Connection: An existing Postgres connection to WRDS; creates one if empty\n\nKeywords\n\ndate_range::Tuple{Date, Date}: A tuple of dates to select data (limits the download size)\nvariables::Vector{String}: A vector of String of additional variable to include in the download\n\nReturns\n\ndf_msf_final::DataFrame: DataFrame with msf crsp file\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.import_MSF_v2-Tuple{LibPQ.Connection}","page":"Public Interface","title":"FinanceRoutines.import_MSF_v2","text":"import_MSF_v2(wrds_conn; date_range, variables, logging_level)\nimport_MSF_v2(;\n    date_range::Tuple{Date, Date} = (Date(\"1900-01-01\"), Dates.today()),\n    variables::String = \"\", user=\"\", password=\"\")\n\nImport the CRSP Monthly Stock File (MSF) from CRSP on WRDS PostGres server from the version 2.0 CIZ files\n\nArguments\n\nwrds_conn::Connection: An existing Postgres connection to WRDS; creates one if empty\n\nKeywords\n\ndate_range::Tuple{Date, Date}: A tuple of dates to select data (limits the download size)\nvariables::Vector{String}: A vector of String of additional variable to include in the download\nlogging_level::Symbol: How to log results\n\nReturns\n\ndf_msf_final::DataFrame: DataFrame with msf crsp file\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.import_gsw_parameters-Tuple{}","page":"Public Interface","title":"FinanceRoutines.import_gsw_parameters","text":"import_gsw_parameters(; date_range=nothing, validate=true)\n\nImport Gürkaynak-Sack-Wright (GSW) yield curve parameters from the Federal Reserve.\n\nDownloads the daily GSW yield curve parameter estimates from the Fed's website and returns a cleaned DataFrame with the Nelson-Siegel-Svensson model parameters.\n\nArguments\n\ndate_range::Union{Nothing, Tuple{Date, Date}}: Optional date range for filtering data.  If nothing, returns all available data. Default: nothing\nvalidate::Bool: Whether to validate input parameters and data quality. Default: true\n\nReturns\n\nDataFrame: Contains columns :date, :BETA0, :BETA1, :BETA2, :BETA3, :TAU1, :TAU2\n\nThrows\n\nArgumentError: If date range is invalid\nHTTP.ExceptionRequest.StatusError: If download fails\nException: If data parsing fails\n\nExamples\n\n# Import all available data\ndf = import_gsw_parameters()\n\n# Import data for specific date range  \ndf = import_gsw_parameters(date_range=(Date(\"2020-01-01\"), Date(\"2023-12-31\")))\n\n# Import without validation (faster, but less safe)\ndf = import_gsw_parameters(validate=false)\n\nNotes\n\nData source: Federal Reserve Economic Data (FRED)\nThe GSW model uses the Nelson-Siegel-Svensson functional form\nMissing values in the original data are converted to missing\nData is automatically sorted by date\nAdditional variables: \nZero-coupon yield,Continuously Compounded,SVENYXX\nPar yield,Coupon-Equivalent,SVENPYXX\nInstantaneous forward rate,Continuously Compounded,SVENFXX\nOne-year forward rate,Coupon-Equivalent,SVEN1FXX\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#FinanceRoutines.link_Funda","page":"Public Interface","title":"FinanceRoutines.link_Funda","text":"link_Funda(df_linktable::DataFrame, df_funda::DataFrame, variables::Vector{Symbol}=Symbol[])\n\nLink Compustat fundamentals data with CRSP security identifiers using a linking table.\n\nThis function performs a temporal join between Compustat fundamental data and a security  linking table (typically CRSP/Compustat Merged Database linking table) to assign PERMNO  identifiers to Compustat records based on valid date ranges.\n\nArguments\n\ndf_linktable::DataFrame: Linking table containing the mapping between GVKEY and PERMNO  identifiers. Must include columns:\n:gvkey: Compustat's permanent company identifier\n:linkdt: Start date of the link validity period\n:linkenddt: End date of the link validity period\n:permno: CRSP's permanent security identifier\nAdditional columns that will be removed: :linkprim, :liid, :linktype\ndf_funda::DataFrame: Compustat fundamentals data. Must include columns:\n:gvkey: Compustat's permanent company identifier\n:datadate: Date of the fundamental data observation\nvariables::Vector{Symbol}=Symbol[]: which existing variables in the dataframe do we want to keep\n\nReturns\n\nDataFrame: Joined dataset containing all columns from df_funda plus :permno from  the linking table. The following columns from the linking table are excluded from output: :gvkey_1, :linkprim, :liid, :linktype, :linkdt, :linkenddt\n\nDetails\n\nThe function performs an inner join where:\n\nRecords are matched on :gvkey\nThe :datadate from fundamentals must fall within the valid link period  [linkdt, linkenddt] from the linking table\n\nThis ensures that each fundamental data observation is matched with the correct PERMNO  based on the security's identification history, handling cases where companies change  their CRSP identifiers over time.\n\nExamples\n\n# Load linking table and fundamentals data\ndf_linktable = load_ccm_links()\ndf_funda = load_compustat_funda()\n\n# Link the datasets\nlinked_data = link_Funda(df_linktable, df_funda)\n# Result contains fundamental data with PERMNO identifiers added\n\nNotes\n\nUses FlexiJoins.innerjoin for temporal joining capabilities Only records with valid links during the observation date are retained\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#FinanceRoutines.link_MSF-Tuple{DataFrames.DataFrame, DataFrames.DataFrame}","page":"Public Interface","title":"FinanceRoutines.link_MSF","text":"link_MSF(df_linktable::DataFrame, df_msf::DataFrame; variables::Vector{Symbol}=Symbol[])\n\nLink CRSP monthly stock file data with Compustat identifiers using a linking table.\n\nThis function performs a temporal join to add GVKEY (Compustat identifiers) to CRSP monthly  stock data, enabling cross-database analysis between CRSP and Compustat datasets.\n\nArguments\n\ndf_linktable::DataFrame: Linking table containing the mapping between PERMNO and GVKEY  identifiers. Must include columns:\n:permno: CRSP's permanent security identifier\n:gvkey: Compustat's permanent company identifier\n:linkdt: Start date of the link validity period\n:linkenddt: End date of the link validity period\ndf_msf::DataFrame: CRSP monthly stock file data. Must include columns:\n:permno: CRSP's permanent security identifier\n:date: Date of the stock observation\nAdditional columns as specified in variables (if any)\n\nKeyword Arguments\n\nvariables::Vector{Symbol}=Symbol[]: Optional list of additional columns to retain from  the linking process. Only columns that exist in both datasets will be kept.\n\nReturns\n\nDataFrame: Original CRSP data with GVKEY identifiers added where valid links exist.  Includes:\nAll original columns from df_msf\n:gvkey: Compustat identifier (where available)\n:datey: Year extracted from the :date column\nAny additional columns specified in variables that exist in the joined data\n\nDetails\n\nThe function performs a two-step process:\n\nInner join with temporal filtering: Matches CRSP records to the linking table where  the stock date falls within the valid link period [linkdt, linkenddt]\nLeft join back to original data: Ensures all original CRSP records are retained,  with GVKEY values added only where valid links exist\n\nRecords with missing GVKEY values after the initial join are filtered out before the  merge-back step, ensuring only valid links are propagated.\n\nExamples\n\n# Load data\ndf_linktable = load_ccm_links()\ndf_msf = load_crsp_monthly()\n\n# Basic linking\nlinked_msf = link_MSF(df_linktable, df_msf)\n\n# Include additional variables from the linking table\nlinked_msf = link_MSF(df_linktable, df_msf, variables=[:linkprim, :linktype])\n\n\n\n\n\n","category":"method"},{"location":"#FinanceRoutines.jl","page":"Home","title":"FinanceRoutines.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Some useful tools to work with academic financial data in Julia","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package provides a collection of routines for academic finance work.  This is useful to get started with a clean copy of asset prices from CRSP and a ad-hoc merge with the accounting data from the Compustat Funda file. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"I have also added utilities to download treasury yield curves (GSW) and Fama-French research factors.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This is still very much work in progress: file issues for comments.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"FinanceRoutines.jl is a not yet a registered package. You can install it from github  via","category":"page"},{"location":"","page":"Home","title":"Home","text":"import Pkg\nPkg.add(\"https://github.com/eloualiche/FinanceRoutines.jl\")","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Using WRDS (CRSP, Compustat, etc)\nSee the WRDS User Guide for an introduction to using the package to download data from WRDS\nDemos to how this integrates into standard estimations\nSee how to estimate asset pricing betas in the Estimating Beta demo.\nBuild general queries for the WRDS postgres in Advanced WRDS","category":"page"},{"location":"#Other-Resources","page":"Home","title":"Other Resources","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"There are multiple online resources on using the WRDS Postgres database and build the standard finance and accounting datasets:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Ian D. Gow and Tony Ding: \"Empirical Research in Accounting: Tools and Methods\"; available here\nChen, Andrew Y. and Tom Zimmermann: \"Open Source Cross-Sectional Asset Pricing\"; 2022, 27:2; available here\nChristoph Scheuch, Stefan Voigt, Patrick Weiss: \"Tidy Finance with R\"; 2023; Chapman & Hall; available here","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"demo/wrds_advanced/#Advanced-WRDS","page":"Advanced WRDS","title":"Advanced WRDS","text":"","category":"section"},{"location":"demo/wrds_advanced/","page":"Advanced WRDS","title":"Advanced WRDS","text":"The package provides ready-built query to the postgres WRDS database.  The queries are the most common and used ones and allow to get a crsp/compustat dataset fairly quickly.","category":"page"},{"location":"demo/wrds_advanced/","page":"Advanced WRDS","title":"Advanced WRDS","text":"Some people will want to run their own queries.  This is a little outside the scope of the package but I keep this page as a list of examples that can be useful. Post an issue if you want to add to the list. ","category":"page"},{"location":"demo/wrds_advanced/","page":"Advanced WRDS","title":"Advanced WRDS","text":"We are always going to start by opening a connection to WRDS. So for the rest of the examples I will assume that we include the preamble","category":"page"},{"location":"demo/wrds_advanced/","page":"Advanced WRDS","title":"Advanced WRDS","text":"using FinanceRoutines\nusing DataFrames, DataPipes, Dates\nimport LibPQ\n\nusing Prototypes # see https://github.com/eloualiche/Prototypes.jl\nwrds_conn = FinanceRoutines.open_wrds_pg();","category":"page"},{"location":"demo/wrds_advanced/#CRSP:-Filtering-on-names","page":"Advanced WRDS","title":"CRSP: Filtering on names","text":"","category":"section"},{"location":"demo/wrds_advanced/","page":"Advanced WRDS","title":"Advanced WRDS","text":"To get information on what columns are available, query the information_schema:","category":"page"},{"location":"demo/wrds_advanced/","page":"Advanced WRDS","title":"Advanced WRDS","text":"postgre_query_columns= \"\"\"\n    SELECT *\n        FROM information_schema.columns\n    WHERE table_schema = 'crsp'\n      AND table_name   = 'StkSecurityInfoHist';\n\"\"\"\nmsenames_columns = @p LibPQ.execute(wrds_conn, postgre_query_msenames_columns) |> \n    DataFrame |> __.column_name |> sort ","category":"page"},{"location":"demo/wrds_advanced/","page":"Advanced WRDS","title":"Advanced WRDS","text":"Sometimes we want to know what are the tables available, for example the meta tables","category":"page"},{"location":"demo/wrds_advanced/","page":"Advanced WRDS","title":"Advanced WRDS","text":"postgre_query =  \"\"\"\nSELECT table_name, table_schema, table_type\n    FROM information_schema.tables\n    WHERE table_name LIKE 'meta%' AND table_schema = 'crsp'\n\"\"\"\nLibPQ.execute(wrds_conn, postgre_query) |> DataFrame ","category":"page"},{"location":"demo/wrds_advanced/","page":"Advanced WRDS","title":"Advanced WRDS","text":"Now imagine that we want to pull columns from the monthly stock file with the following conditions: a given time frame (e.g. the 2000s) and company names that contain \"AP\". We would get the permno that match from StkSecurityInfoHist and match it on the fly to msf","category":"page"},{"location":"demo/wrds_advanced/","page":"Advanced WRDS","title":"Advanced WRDS","text":"postgre_query = \"\"\"\nSELECT msf.cusip, msf.permno, msf.mthcaldt, msf.mthprc, msf.mthret, msf.mthvol, msf.shrout, msf.siccd,\n       stkinfo.issuernm\nFROM crsp.msf_v2 AS msf\nINNER JOIN crsp.StkSecurityInfoHist AS stkinfo \n  ON msf.permno = stkinfo.permno\nWHERE stkinfo.issuernm ~ '(^APPLE|TESLA)'\n  AND msf.mthcaldt >= '2010-01-01'\n  AND msf.mthcaldt <= '2019-12-31';\n\"\"\"\n\ndf_msf = LibPQ.execute(wrds_conn, postgre_query) |> DataFrame\ntabulate(df_msf, [:permno, :issuernm])","category":"page"},{"location":"demo/wrds_advanced/","page":"Advanced WRDS","title":"Advanced WRDS","text":"bash  permno  issuernm                   │ Freq.  Percent  Cum           Hist. ────────────────────────────────────┼───────────────────────────────────────────────  14593   APPLE COMPUTER INC         │  600    29.2    29   ███████████████████████▉  14593   APPLE INC                  │  600    29.2    58   ███████████████████████▉  15338   APPLE HOSPITALITY REIT INC │  280    13.6    72   ███████████▏  93436   TESLA MOTORS INC           │  115     5.6    78   ████▋  93436   TESLA INC                  │  460    22.4    100  ██████████████████▎","category":"page"},{"location":"man/wrds_guide/#WRDS-User-Guide","page":"WRDS User Guide","title":"WRDS User Guide","text":"","category":"section"},{"location":"man/wrds_guide/#Opening-a-WRDS-connection","page":"WRDS User Guide","title":"Opening a WRDS connection","text":"","category":"section"},{"location":"man/wrds_guide/","page":"WRDS User Guide","title":"WRDS User Guide","text":"Since we are about to download data from CRSP we set up a connection with our WRDS credentials","category":"page"},{"location":"man/wrds_guide/","page":"WRDS User Guide","title":"WRDS User Guide","text":"using FinanceRoutines\nusing DataFrames, Dates\nusing FixedEffectModels # for regressions\nwrds_conn = FinanceRoutines.open_wrds_pg()\nconst date_init = Date(\"2010-01-01\")","category":"page"},{"location":"man/wrds_guide/#Download-the-monthly-stock-file-from-CRSP","page":"WRDS User Guide","title":"Download the monthly stock file from CRSP","text":"","category":"section"},{"location":"man/wrds_guide/","page":"WRDS User Guide","title":"WRDS User Guide","text":"Import the monthly stock file","category":"page"},{"location":"man/wrds_guide/","page":"WRDS User Guide","title":"WRDS User Guide","text":"df_msf = import_MSF_v2(wrds_conn; date_range = (date_init, Dates.today())); \nselect!(df_msf, :permno, :mthcaldt=>:date, :datem, :mthret=>:ret, :mthcap)","category":"page"},{"location":"man/wrds_guide/","page":"WRDS User Guide","title":"WRDS User Guide","text":"If you are using the old SIZ MSF files","category":"page"},{"location":"man/wrds_guide/","page":"WRDS User Guide","title":"WRDS User Guide","text":"# Import the monthly stock file\ndf_msf = import_MSF(wrds_conn; date_range = (Date(\"1980-01-01\"), Dates.today())); \ndf_msf = build_MSF!(df_msf);    # Run common processing\n# keep only what we need from the MSF\nselect!(df_msf, :permno, :date, :datem, :ret, :mktcap)","category":"page"},{"location":"man/wrds_guide/#Download-the-annual-compustat-funda-file-from-WRDS","page":"WRDS User Guide","title":"Download the annual compustat funda file from WRDS","text":"","category":"section"},{"location":"man/wrds_guide/","page":"WRDS User Guide","title":"WRDS User Guide","text":"df_funda = import_Funda(wrds_conn; date_range = (date_init, Dates.today())); \nbuild_Funda!(df_funda);","category":"page"},{"location":"man/wrds_guide/#Merge-both-files-CRSP-MSF-and-Compustat-Funda","page":"WRDS User Guide","title":"Merge both files CRSP MSF and Compustat Funda","text":"","category":"section"},{"location":"man/wrds_guide/","page":"WRDS User Guide","title":"WRDS User Guide","text":"df_linktable = FinanceRoutines.import_ccm_link(wrds_conn)\ndf_msf = link_MSF(df_linktable, df_msf) # merge gvkey on monthly stock file\n# merge for a crsp/compustat merged file\ndf_ccm = innerjoin(df_msf, df_funda, on = [:gvkey, :datey], matchmissing=:notequal)","category":"page"}]
}
